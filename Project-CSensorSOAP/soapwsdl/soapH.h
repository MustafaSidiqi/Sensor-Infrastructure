/* soapH.h
   Generated by gSOAP 2.8.41 for csensorwsdl.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_byte(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (soap_read_byte(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_int(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (soap_read_int(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_bool(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (soap_read_bool(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_std__string(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__NoSuchAlgorithmException_DEFINED
#define SOAP_TYPE_ns1__NoSuchAlgorithmException_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NoSuchAlgorithmException(struct soap*, const char*, int, const ns1__NoSuchAlgorithmException *, const char*);
SOAP_FMAC3 ns1__NoSuchAlgorithmException * SOAP_FMAC4 soap_in_ns1__NoSuchAlgorithmException(struct soap*, const char*, ns1__NoSuchAlgorithmException *, const char*);
SOAP_FMAC1 ns1__NoSuchAlgorithmException * SOAP_FMAC2 soap_instantiate_ns1__NoSuchAlgorithmException(struct soap*, int, const char*, const char*, size_t*);

inline ns1__NoSuchAlgorithmException * soap_new_ns1__NoSuchAlgorithmException(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__NoSuchAlgorithmException(soap, n, NULL, NULL, NULL);
}

inline ns1__NoSuchAlgorithmException * soap_new_req_ns1__NoSuchAlgorithmException(
	struct soap *soap)
{
	ns1__NoSuchAlgorithmException *_p = soap_new_ns1__NoSuchAlgorithmException(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__NoSuchAlgorithmException * soap_new_set_ns1__NoSuchAlgorithmException(
	struct soap *soap,
	std::string *message)
{
	ns1__NoSuchAlgorithmException *_p = soap_new_ns1__NoSuchAlgorithmException(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__NoSuchAlgorithmException::message = message;
	}
	return _p;
}

inline int soap_write_ns1__NoSuchAlgorithmException(struct soap *soap, ns1__NoSuchAlgorithmException const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NoSuchAlgorithmException", p->soap_type() == SOAP_TYPE_ns1__NoSuchAlgorithmException ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__NoSuchAlgorithmException(struct soap *soap, const char *URL, ns1__NoSuchAlgorithmException const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NoSuchAlgorithmException", p->soap_type() == SOAP_TYPE_ns1__NoSuchAlgorithmException ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__NoSuchAlgorithmException(struct soap *soap, const char *URL, ns1__NoSuchAlgorithmException const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NoSuchAlgorithmException", p->soap_type() == SOAP_TYPE_ns1__NoSuchAlgorithmException ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__NoSuchAlgorithmException * SOAP_FMAC4 soap_get_ns1__NoSuchAlgorithmException(struct soap*, ns1__NoSuchAlgorithmException *, const char*, const char*);

inline int soap_read_ns1__NoSuchAlgorithmException(struct soap *soap, ns1__NoSuchAlgorithmException *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__NoSuchAlgorithmException(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__NoSuchAlgorithmException(struct soap *soap, const char *URL, ns1__NoSuchAlgorithmException *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__NoSuchAlgorithmException(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__NoSuchAlgorithmException(struct soap *soap, ns1__NoSuchAlgorithmException *p)
{
	if (soap_read_ns1__NoSuchAlgorithmException(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Fault(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Reason(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Code(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Header(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE_ns1__recieveOKSOAP_DEFINED
#define SOAP_TYPE_ns1__recieveOKSOAP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__recieveOKSOAP(struct soap*, struct ns1__recieveOKSOAP *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__recieveOKSOAP(struct soap*, const struct ns1__recieveOKSOAP *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__recieveOKSOAP(struct soap*, const char*, int, const struct ns1__recieveOKSOAP *, const char*);
SOAP_FMAC3 struct ns1__recieveOKSOAP * SOAP_FMAC4 soap_in_ns1__recieveOKSOAP(struct soap*, const char*, struct ns1__recieveOKSOAP *, const char*);
SOAP_FMAC1 struct ns1__recieveOKSOAP * SOAP_FMAC2 soap_instantiate_ns1__recieveOKSOAP(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__recieveOKSOAP * soap_new_ns1__recieveOKSOAP(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__recieveOKSOAP(soap, n, NULL, NULL, NULL);
}

inline struct ns1__recieveOKSOAP * soap_new_req_ns1__recieveOKSOAP(
	struct soap *soap)
{
	struct ns1__recieveOKSOAP *_p = soap_new_ns1__recieveOKSOAP(soap);
	if (_p)
	{	soap_default_ns1__recieveOKSOAP(soap, _p);
	}
	return _p;
}

inline struct ns1__recieveOKSOAP * soap_new_set_ns1__recieveOKSOAP(
	struct soap *soap)
{
	struct ns1__recieveOKSOAP *_p = soap_new_ns1__recieveOKSOAP(soap);
	if (_p)
	{	soap_default_ns1__recieveOKSOAP(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__recieveOKSOAP(struct soap*, const struct ns1__recieveOKSOAP *, const char*, const char*);

inline int soap_write_ns1__recieveOKSOAP(struct soap *soap, struct ns1__recieveOKSOAP const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__recieveOKSOAP(soap, p), 0) || soap_put_ns1__recieveOKSOAP(soap, p, "ns1:recieveOKSOAP", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__recieveOKSOAP(struct soap *soap, const char *URL, struct ns1__recieveOKSOAP const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__recieveOKSOAP(soap, p), 0) || soap_put_ns1__recieveOKSOAP(soap, p, "ns1:recieveOKSOAP", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__recieveOKSOAP(struct soap *soap, const char *URL, struct ns1__recieveOKSOAP const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__recieveOKSOAP(soap, p), 0) || soap_put_ns1__recieveOKSOAP(soap, p, "ns1:recieveOKSOAP", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__recieveOKSOAP * SOAP_FMAC4 soap_get_ns1__recieveOKSOAP(struct soap*, struct ns1__recieveOKSOAP *, const char*, const char*);

inline int soap_read_ns1__recieveOKSOAP(struct soap *soap, struct ns1__recieveOKSOAP *p)
{
	if (p)
	{	soap_default_ns1__recieveOKSOAP(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__recieveOKSOAP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__recieveOKSOAP(struct soap *soap, const char *URL, struct ns1__recieveOKSOAP *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__recieveOKSOAP(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__recieveOKSOAP(struct soap *soap, struct ns1__recieveOKSOAP *p)
{
	if (soap_read_ns1__recieveOKSOAP(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__recieveOKSOAPResponse_DEFINED
#define SOAP_TYPE_ns1__recieveOKSOAPResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__recieveOKSOAPResponse(struct soap*, struct ns1__recieveOKSOAPResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__recieveOKSOAPResponse(struct soap*, const struct ns1__recieveOKSOAPResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__recieveOKSOAPResponse(struct soap*, const char*, int, const struct ns1__recieveOKSOAPResponse *, const char*);
SOAP_FMAC3 struct ns1__recieveOKSOAPResponse * SOAP_FMAC4 soap_in_ns1__recieveOKSOAPResponse(struct soap*, const char*, struct ns1__recieveOKSOAPResponse *, const char*);
SOAP_FMAC1 struct ns1__recieveOKSOAPResponse * SOAP_FMAC2 soap_instantiate_ns1__recieveOKSOAPResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__recieveOKSOAPResponse * soap_new_ns1__recieveOKSOAPResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__recieveOKSOAPResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__recieveOKSOAPResponse * soap_new_req_ns1__recieveOKSOAPResponse(
	struct soap *soap,
	bool return_)
{
	struct ns1__recieveOKSOAPResponse *_p = soap_new_ns1__recieveOKSOAPResponse(soap);
	if (_p)
	{	soap_default_ns1__recieveOKSOAPResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}

inline struct ns1__recieveOKSOAPResponse * soap_new_set_ns1__recieveOKSOAPResponse(
	struct soap *soap,
	bool return_)
{
	struct ns1__recieveOKSOAPResponse *_p = soap_new_ns1__recieveOKSOAPResponse(soap);
	if (_p)
	{	soap_default_ns1__recieveOKSOAPResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__recieveOKSOAPResponse(struct soap*, const struct ns1__recieveOKSOAPResponse *, const char*, const char*);

inline int soap_write_ns1__recieveOKSOAPResponse(struct soap *soap, struct ns1__recieveOKSOAPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__recieveOKSOAPResponse(soap, p), 0) || soap_put_ns1__recieveOKSOAPResponse(soap, p, "ns1:recieveOKSOAPResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__recieveOKSOAPResponse(struct soap *soap, const char *URL, struct ns1__recieveOKSOAPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__recieveOKSOAPResponse(soap, p), 0) || soap_put_ns1__recieveOKSOAPResponse(soap, p, "ns1:recieveOKSOAPResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__recieveOKSOAPResponse(struct soap *soap, const char *URL, struct ns1__recieveOKSOAPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__recieveOKSOAPResponse(soap, p), 0) || soap_put_ns1__recieveOKSOAPResponse(soap, p, "ns1:recieveOKSOAPResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__recieveOKSOAPResponse * SOAP_FMAC4 soap_get_ns1__recieveOKSOAPResponse(struct soap*, struct ns1__recieveOKSOAPResponse *, const char*, const char*);

inline int soap_read_ns1__recieveOKSOAPResponse(struct soap *soap, struct ns1__recieveOKSOAPResponse *p)
{
	if (p)
	{	soap_default_ns1__recieveOKSOAPResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__recieveOKSOAPResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__recieveOKSOAPResponse(struct soap *soap, const char *URL, struct ns1__recieveOKSOAPResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__recieveOKSOAPResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__recieveOKSOAPResponse(struct soap *soap, struct ns1__recieveOKSOAPResponse *p)
{
	if (soap_read_ns1__recieveOKSOAPResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__sendLogHashCipherSOAP_DEFINED
#define SOAP_TYPE_ns1__sendLogHashCipherSOAP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__sendLogHashCipherSOAP(struct soap*, struct ns1__sendLogHashCipherSOAP *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__sendLogHashCipherSOAP(struct soap*, const struct ns1__sendLogHashCipherSOAP *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendLogHashCipherSOAP(struct soap*, const char*, int, const struct ns1__sendLogHashCipherSOAP *, const char*);
SOAP_FMAC3 struct ns1__sendLogHashCipherSOAP * SOAP_FMAC4 soap_in_ns1__sendLogHashCipherSOAP(struct soap*, const char*, struct ns1__sendLogHashCipherSOAP *, const char*);
SOAP_FMAC1 struct ns1__sendLogHashCipherSOAP * SOAP_FMAC2 soap_instantiate_ns1__sendLogHashCipherSOAP(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__sendLogHashCipherSOAP * soap_new_ns1__sendLogHashCipherSOAP(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__sendLogHashCipherSOAP(soap, n, NULL, NULL, NULL);
}

inline struct ns1__sendLogHashCipherSOAP * soap_new_req_ns1__sendLogHashCipherSOAP(
	struct soap *soap,
	const std::string& arg0)
{
	struct ns1__sendLogHashCipherSOAP *_p = soap_new_ns1__sendLogHashCipherSOAP(soap);
	if (_p)
	{	soap_default_ns1__sendLogHashCipherSOAP(soap, _p);
		_p->arg0 = arg0;
	}
	return _p;
}

inline struct ns1__sendLogHashCipherSOAP * soap_new_set_ns1__sendLogHashCipherSOAP(
	struct soap *soap,
	const std::string& arg0)
{
	struct ns1__sendLogHashCipherSOAP *_p = soap_new_ns1__sendLogHashCipherSOAP(soap);
	if (_p)
	{	soap_default_ns1__sendLogHashCipherSOAP(soap, _p);
		_p->arg0 = arg0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__sendLogHashCipherSOAP(struct soap*, const struct ns1__sendLogHashCipherSOAP *, const char*, const char*);

inline int soap_write_ns1__sendLogHashCipherSOAP(struct soap *soap, struct ns1__sendLogHashCipherSOAP const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__sendLogHashCipherSOAP(soap, p), 0) || soap_put_ns1__sendLogHashCipherSOAP(soap, p, "ns1:sendLogHashCipherSOAP", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__sendLogHashCipherSOAP(struct soap *soap, const char *URL, struct ns1__sendLogHashCipherSOAP const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__sendLogHashCipherSOAP(soap, p), 0) || soap_put_ns1__sendLogHashCipherSOAP(soap, p, "ns1:sendLogHashCipherSOAP", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__sendLogHashCipherSOAP(struct soap *soap, const char *URL, struct ns1__sendLogHashCipherSOAP const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__sendLogHashCipherSOAP(soap, p), 0) || soap_put_ns1__sendLogHashCipherSOAP(soap, p, "ns1:sendLogHashCipherSOAP", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__sendLogHashCipherSOAP * SOAP_FMAC4 soap_get_ns1__sendLogHashCipherSOAP(struct soap*, struct ns1__sendLogHashCipherSOAP *, const char*, const char*);

inline int soap_read_ns1__sendLogHashCipherSOAP(struct soap *soap, struct ns1__sendLogHashCipherSOAP *p)
{
	if (p)
	{	soap_default_ns1__sendLogHashCipherSOAP(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__sendLogHashCipherSOAP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__sendLogHashCipherSOAP(struct soap *soap, const char *URL, struct ns1__sendLogHashCipherSOAP *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__sendLogHashCipherSOAP(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__sendLogHashCipherSOAP(struct soap *soap, struct ns1__sendLogHashCipherSOAP *p)
{
	if (soap_read_ns1__sendLogHashCipherSOAP(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__sendLogHashCipherSOAPResponse_DEFINED
#define SOAP_TYPE_ns1__sendLogHashCipherSOAPResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__sendLogHashCipherSOAPResponse(struct soap*, struct ns1__sendLogHashCipherSOAPResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__sendLogHashCipherSOAPResponse(struct soap*, const struct ns1__sendLogHashCipherSOAPResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendLogHashCipherSOAPResponse(struct soap*, const char*, int, const struct ns1__sendLogHashCipherSOAPResponse *, const char*);
SOAP_FMAC3 struct ns1__sendLogHashCipherSOAPResponse * SOAP_FMAC4 soap_in_ns1__sendLogHashCipherSOAPResponse(struct soap*, const char*, struct ns1__sendLogHashCipherSOAPResponse *, const char*);
SOAP_FMAC1 struct ns1__sendLogHashCipherSOAPResponse * SOAP_FMAC2 soap_instantiate_ns1__sendLogHashCipherSOAPResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__sendLogHashCipherSOAPResponse * soap_new_ns1__sendLogHashCipherSOAPResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__sendLogHashCipherSOAPResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__sendLogHashCipherSOAPResponse * soap_new_req_ns1__sendLogHashCipherSOAPResponse(
	struct soap *soap)
{
	struct ns1__sendLogHashCipherSOAPResponse *_p = soap_new_ns1__sendLogHashCipherSOAPResponse(soap);
	if (_p)
	{	soap_default_ns1__sendLogHashCipherSOAPResponse(soap, _p);
	}
	return _p;
}

inline struct ns1__sendLogHashCipherSOAPResponse * soap_new_set_ns1__sendLogHashCipherSOAPResponse(
	struct soap *soap)
{
	struct ns1__sendLogHashCipherSOAPResponse *_p = soap_new_ns1__sendLogHashCipherSOAPResponse(soap);
	if (_p)
	{	soap_default_ns1__sendLogHashCipherSOAPResponse(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__sendLogHashCipherSOAPResponse(struct soap*, const struct ns1__sendLogHashCipherSOAPResponse *, const char*, const char*);

inline int soap_write_ns1__sendLogHashCipherSOAPResponse(struct soap *soap, struct ns1__sendLogHashCipherSOAPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__sendLogHashCipherSOAPResponse(soap, p), 0) || soap_put_ns1__sendLogHashCipherSOAPResponse(soap, p, "ns1:sendLogHashCipherSOAPResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__sendLogHashCipherSOAPResponse(struct soap *soap, const char *URL, struct ns1__sendLogHashCipherSOAPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__sendLogHashCipherSOAPResponse(soap, p), 0) || soap_put_ns1__sendLogHashCipherSOAPResponse(soap, p, "ns1:sendLogHashCipherSOAPResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__sendLogHashCipherSOAPResponse(struct soap *soap, const char *URL, struct ns1__sendLogHashCipherSOAPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__sendLogHashCipherSOAPResponse(soap, p), 0) || soap_put_ns1__sendLogHashCipherSOAPResponse(soap, p, "ns1:sendLogHashCipherSOAPResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__sendLogHashCipherSOAPResponse * SOAP_FMAC4 soap_get_ns1__sendLogHashCipherSOAPResponse(struct soap*, struct ns1__sendLogHashCipherSOAPResponse *, const char*, const char*);

inline int soap_read_ns1__sendLogHashCipherSOAPResponse(struct soap *soap, struct ns1__sendLogHashCipherSOAPResponse *p)
{
	if (p)
	{	soap_default_ns1__sendLogHashCipherSOAPResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__sendLogHashCipherSOAPResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__sendLogHashCipherSOAPResponse(struct soap *soap, const char *URL, struct ns1__sendLogHashCipherSOAPResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__sendLogHashCipherSOAPResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__sendLogHashCipherSOAPResponse(struct soap *soap, struct ns1__sendLogHashCipherSOAPResponse *p)
{
	if (soap_read_ns1__sendLogHashCipherSOAPResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__sendCipherInonsenseSOAP_DEFINED
#define SOAP_TYPE_ns1__sendCipherInonsenseSOAP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__sendCipherInonsenseSOAP(struct soap*, struct ns1__sendCipherInonsenseSOAP *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__sendCipherInonsenseSOAP(struct soap*, const struct ns1__sendCipherInonsenseSOAP *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendCipherInonsenseSOAP(struct soap*, const char*, int, const struct ns1__sendCipherInonsenseSOAP *, const char*);
SOAP_FMAC3 struct ns1__sendCipherInonsenseSOAP * SOAP_FMAC4 soap_in_ns1__sendCipherInonsenseSOAP(struct soap*, const char*, struct ns1__sendCipherInonsenseSOAP *, const char*);
SOAP_FMAC1 struct ns1__sendCipherInonsenseSOAP * SOAP_FMAC2 soap_instantiate_ns1__sendCipherInonsenseSOAP(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__sendCipherInonsenseSOAP * soap_new_ns1__sendCipherInonsenseSOAP(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__sendCipherInonsenseSOAP(soap, n, NULL, NULL, NULL);
}

inline struct ns1__sendCipherInonsenseSOAP * soap_new_req_ns1__sendCipherInonsenseSOAP(
	struct soap *soap,
	const std::string& arg0)
{
	struct ns1__sendCipherInonsenseSOAP *_p = soap_new_ns1__sendCipherInonsenseSOAP(soap);
	if (_p)
	{	soap_default_ns1__sendCipherInonsenseSOAP(soap, _p);
		_p->arg0 = arg0;
	}
	return _p;
}

inline struct ns1__sendCipherInonsenseSOAP * soap_new_set_ns1__sendCipherInonsenseSOAP(
	struct soap *soap,
	const std::string& arg0)
{
	struct ns1__sendCipherInonsenseSOAP *_p = soap_new_ns1__sendCipherInonsenseSOAP(soap);
	if (_p)
	{	soap_default_ns1__sendCipherInonsenseSOAP(soap, _p);
		_p->arg0 = arg0;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__sendCipherInonsenseSOAP(struct soap*, const struct ns1__sendCipherInonsenseSOAP *, const char*, const char*);

inline int soap_write_ns1__sendCipherInonsenseSOAP(struct soap *soap, struct ns1__sendCipherInonsenseSOAP const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__sendCipherInonsenseSOAP(soap, p), 0) || soap_put_ns1__sendCipherInonsenseSOAP(soap, p, "ns1:sendCipherInonsenseSOAP", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__sendCipherInonsenseSOAP(struct soap *soap, const char *URL, struct ns1__sendCipherInonsenseSOAP const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__sendCipherInonsenseSOAP(soap, p), 0) || soap_put_ns1__sendCipherInonsenseSOAP(soap, p, "ns1:sendCipherInonsenseSOAP", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__sendCipherInonsenseSOAP(struct soap *soap, const char *URL, struct ns1__sendCipherInonsenseSOAP const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__sendCipherInonsenseSOAP(soap, p), 0) || soap_put_ns1__sendCipherInonsenseSOAP(soap, p, "ns1:sendCipherInonsenseSOAP", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__sendCipherInonsenseSOAP * SOAP_FMAC4 soap_get_ns1__sendCipherInonsenseSOAP(struct soap*, struct ns1__sendCipherInonsenseSOAP *, const char*, const char*);

inline int soap_read_ns1__sendCipherInonsenseSOAP(struct soap *soap, struct ns1__sendCipherInonsenseSOAP *p)
{
	if (p)
	{	soap_default_ns1__sendCipherInonsenseSOAP(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__sendCipherInonsenseSOAP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__sendCipherInonsenseSOAP(struct soap *soap, const char *URL, struct ns1__sendCipherInonsenseSOAP *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__sendCipherInonsenseSOAP(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__sendCipherInonsenseSOAP(struct soap *soap, struct ns1__sendCipherInonsenseSOAP *p)
{
	if (soap_read_ns1__sendCipherInonsenseSOAP(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__sendCipherInonsenseSOAPResponse_DEFINED
#define SOAP_TYPE_ns1__sendCipherInonsenseSOAPResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__sendCipherInonsenseSOAPResponse(struct soap*, struct ns1__sendCipherInonsenseSOAPResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__sendCipherInonsenseSOAPResponse(struct soap*, const struct ns1__sendCipherInonsenseSOAPResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendCipherInonsenseSOAPResponse(struct soap*, const char*, int, const struct ns1__sendCipherInonsenseSOAPResponse *, const char*);
SOAP_FMAC3 struct ns1__sendCipherInonsenseSOAPResponse * SOAP_FMAC4 soap_in_ns1__sendCipherInonsenseSOAPResponse(struct soap*, const char*, struct ns1__sendCipherInonsenseSOAPResponse *, const char*);
SOAP_FMAC1 struct ns1__sendCipherInonsenseSOAPResponse * SOAP_FMAC2 soap_instantiate_ns1__sendCipherInonsenseSOAPResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__sendCipherInonsenseSOAPResponse * soap_new_ns1__sendCipherInonsenseSOAPResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__sendCipherInonsenseSOAPResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__sendCipherInonsenseSOAPResponse * soap_new_req_ns1__sendCipherInonsenseSOAPResponse(
	struct soap *soap)
{
	struct ns1__sendCipherInonsenseSOAPResponse *_p = soap_new_ns1__sendCipherInonsenseSOAPResponse(soap);
	if (_p)
	{	soap_default_ns1__sendCipherInonsenseSOAPResponse(soap, _p);
	}
	return _p;
}

inline struct ns1__sendCipherInonsenseSOAPResponse * soap_new_set_ns1__sendCipherInonsenseSOAPResponse(
	struct soap *soap)
{
	struct ns1__sendCipherInonsenseSOAPResponse *_p = soap_new_ns1__sendCipherInonsenseSOAPResponse(soap);
	if (_p)
	{	soap_default_ns1__sendCipherInonsenseSOAPResponse(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__sendCipherInonsenseSOAPResponse(struct soap*, const struct ns1__sendCipherInonsenseSOAPResponse *, const char*, const char*);

inline int soap_write_ns1__sendCipherInonsenseSOAPResponse(struct soap *soap, struct ns1__sendCipherInonsenseSOAPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__sendCipherInonsenseSOAPResponse(soap, p), 0) || soap_put_ns1__sendCipherInonsenseSOAPResponse(soap, p, "ns1:sendCipherInonsenseSOAPResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__sendCipherInonsenseSOAPResponse(struct soap *soap, const char *URL, struct ns1__sendCipherInonsenseSOAPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__sendCipherInonsenseSOAPResponse(soap, p), 0) || soap_put_ns1__sendCipherInonsenseSOAPResponse(soap, p, "ns1:sendCipherInonsenseSOAPResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__sendCipherInonsenseSOAPResponse(struct soap *soap, const char *URL, struct ns1__sendCipherInonsenseSOAPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__sendCipherInonsenseSOAPResponse(soap, p), 0) || soap_put_ns1__sendCipherInonsenseSOAPResponse(soap, p, "ns1:sendCipherInonsenseSOAPResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__sendCipherInonsenseSOAPResponse * SOAP_FMAC4 soap_get_ns1__sendCipherInonsenseSOAPResponse(struct soap*, struct ns1__sendCipherInonsenseSOAPResponse *, const char*, const char*);

inline int soap_read_ns1__sendCipherInonsenseSOAPResponse(struct soap *soap, struct ns1__sendCipherInonsenseSOAPResponse *p)
{
	if (p)
	{	soap_default_ns1__sendCipherInonsenseSOAPResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__sendCipherInonsenseSOAPResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__sendCipherInonsenseSOAPResponse(struct soap *soap, const char *URL, struct ns1__sendCipherInonsenseSOAPResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__sendCipherInonsenseSOAPResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__sendCipherInonsenseSOAPResponse(struct soap *soap, struct ns1__sendCipherInonsenseSOAPResponse *p)
{
	if (soap_read_ns1__sendCipherInonsenseSOAPResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getPublicKeySOAP_DEFINED
#define SOAP_TYPE_ns1__getPublicKeySOAP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getPublicKeySOAP(struct soap*, struct ns1__getPublicKeySOAP *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getPublicKeySOAP(struct soap*, const struct ns1__getPublicKeySOAP *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getPublicKeySOAP(struct soap*, const char*, int, const struct ns1__getPublicKeySOAP *, const char*);
SOAP_FMAC3 struct ns1__getPublicKeySOAP * SOAP_FMAC4 soap_in_ns1__getPublicKeySOAP(struct soap*, const char*, struct ns1__getPublicKeySOAP *, const char*);
SOAP_FMAC1 struct ns1__getPublicKeySOAP * SOAP_FMAC2 soap_instantiate_ns1__getPublicKeySOAP(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getPublicKeySOAP * soap_new_ns1__getPublicKeySOAP(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getPublicKeySOAP(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getPublicKeySOAP * soap_new_req_ns1__getPublicKeySOAP(
	struct soap *soap)
{
	struct ns1__getPublicKeySOAP *_p = soap_new_ns1__getPublicKeySOAP(soap);
	if (_p)
	{	soap_default_ns1__getPublicKeySOAP(soap, _p);
	}
	return _p;
}

inline struct ns1__getPublicKeySOAP * soap_new_set_ns1__getPublicKeySOAP(
	struct soap *soap)
{
	struct ns1__getPublicKeySOAP *_p = soap_new_ns1__getPublicKeySOAP(soap);
	if (_p)
	{	soap_default_ns1__getPublicKeySOAP(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getPublicKeySOAP(struct soap*, const struct ns1__getPublicKeySOAP *, const char*, const char*);

inline int soap_write_ns1__getPublicKeySOAP(struct soap *soap, struct ns1__getPublicKeySOAP const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getPublicKeySOAP(soap, p), 0) || soap_put_ns1__getPublicKeySOAP(soap, p, "ns1:getPublicKeySOAP", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getPublicKeySOAP(struct soap *soap, const char *URL, struct ns1__getPublicKeySOAP const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getPublicKeySOAP(soap, p), 0) || soap_put_ns1__getPublicKeySOAP(soap, p, "ns1:getPublicKeySOAP", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getPublicKeySOAP(struct soap *soap, const char *URL, struct ns1__getPublicKeySOAP const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getPublicKeySOAP(soap, p), 0) || soap_put_ns1__getPublicKeySOAP(soap, p, "ns1:getPublicKeySOAP", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getPublicKeySOAP * SOAP_FMAC4 soap_get_ns1__getPublicKeySOAP(struct soap*, struct ns1__getPublicKeySOAP *, const char*, const char*);

inline int soap_read_ns1__getPublicKeySOAP(struct soap *soap, struct ns1__getPublicKeySOAP *p)
{
	if (p)
	{	soap_default_ns1__getPublicKeySOAP(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getPublicKeySOAP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getPublicKeySOAP(struct soap *soap, const char *URL, struct ns1__getPublicKeySOAP *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getPublicKeySOAP(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getPublicKeySOAP(struct soap *soap, struct ns1__getPublicKeySOAP *p)
{
	if (soap_read_ns1__getPublicKeySOAP(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getPublicKeySOAPResponse_DEFINED
#define SOAP_TYPE_ns1__getPublicKeySOAPResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getPublicKeySOAPResponse(struct soap*, struct ns1__getPublicKeySOAPResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getPublicKeySOAPResponse(struct soap*, const struct ns1__getPublicKeySOAPResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getPublicKeySOAPResponse(struct soap*, const char*, int, const struct ns1__getPublicKeySOAPResponse *, const char*);
SOAP_FMAC3 struct ns1__getPublicKeySOAPResponse * SOAP_FMAC4 soap_in_ns1__getPublicKeySOAPResponse(struct soap*, const char*, struct ns1__getPublicKeySOAPResponse *, const char*);
SOAP_FMAC1 struct ns1__getPublicKeySOAPResponse * SOAP_FMAC2 soap_instantiate_ns1__getPublicKeySOAPResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getPublicKeySOAPResponse * soap_new_ns1__getPublicKeySOAPResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getPublicKeySOAPResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getPublicKeySOAPResponse * soap_new_req_ns1__getPublicKeySOAPResponse(
	struct soap *soap,
	const std::string& return_)
{
	struct ns1__getPublicKeySOAPResponse *_p = soap_new_ns1__getPublicKeySOAPResponse(soap);
	if (_p)
	{	soap_default_ns1__getPublicKeySOAPResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}

inline struct ns1__getPublicKeySOAPResponse * soap_new_set_ns1__getPublicKeySOAPResponse(
	struct soap *soap,
	const std::string& return_)
{
	struct ns1__getPublicKeySOAPResponse *_p = soap_new_ns1__getPublicKeySOAPResponse(soap);
	if (_p)
	{	soap_default_ns1__getPublicKeySOAPResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getPublicKeySOAPResponse(struct soap*, const struct ns1__getPublicKeySOAPResponse *, const char*, const char*);

inline int soap_write_ns1__getPublicKeySOAPResponse(struct soap *soap, struct ns1__getPublicKeySOAPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getPublicKeySOAPResponse(soap, p), 0) || soap_put_ns1__getPublicKeySOAPResponse(soap, p, "ns1:getPublicKeySOAPResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getPublicKeySOAPResponse(struct soap *soap, const char *URL, struct ns1__getPublicKeySOAPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getPublicKeySOAPResponse(soap, p), 0) || soap_put_ns1__getPublicKeySOAPResponse(soap, p, "ns1:getPublicKeySOAPResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getPublicKeySOAPResponse(struct soap *soap, const char *URL, struct ns1__getPublicKeySOAPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getPublicKeySOAPResponse(soap, p), 0) || soap_put_ns1__getPublicKeySOAPResponse(soap, p, "ns1:getPublicKeySOAPResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getPublicKeySOAPResponse * SOAP_FMAC4 soap_get_ns1__getPublicKeySOAPResponse(struct soap*, struct ns1__getPublicKeySOAPResponse *, const char*, const char*);

inline int soap_read_ns1__getPublicKeySOAPResponse(struct soap *soap, struct ns1__getPublicKeySOAPResponse *p)
{
	if (p)
	{	soap_default_ns1__getPublicKeySOAPResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getPublicKeySOAPResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getPublicKeySOAPResponse(struct soap *soap, const char *URL, struct ns1__getPublicKeySOAPResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getPublicKeySOAPResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getPublicKeySOAPResponse(struct soap *soap, struct ns1__getPublicKeySOAPResponse *p)
{
	if (soap_read_ns1__getPublicKeySOAPResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getNonsenseSOAP_DEFINED
#define SOAP_TYPE_ns1__getNonsenseSOAP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getNonsenseSOAP(struct soap*, struct ns1__getNonsenseSOAP *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getNonsenseSOAP(struct soap*, const struct ns1__getNonsenseSOAP *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getNonsenseSOAP(struct soap*, const char*, int, const struct ns1__getNonsenseSOAP *, const char*);
SOAP_FMAC3 struct ns1__getNonsenseSOAP * SOAP_FMAC4 soap_in_ns1__getNonsenseSOAP(struct soap*, const char*, struct ns1__getNonsenseSOAP *, const char*);
SOAP_FMAC1 struct ns1__getNonsenseSOAP * SOAP_FMAC2 soap_instantiate_ns1__getNonsenseSOAP(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getNonsenseSOAP * soap_new_ns1__getNonsenseSOAP(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getNonsenseSOAP(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getNonsenseSOAP * soap_new_req_ns1__getNonsenseSOAP(
	struct soap *soap)
{
	struct ns1__getNonsenseSOAP *_p = soap_new_ns1__getNonsenseSOAP(soap);
	if (_p)
	{	soap_default_ns1__getNonsenseSOAP(soap, _p);
	}
	return _p;
}

inline struct ns1__getNonsenseSOAP * soap_new_set_ns1__getNonsenseSOAP(
	struct soap *soap)
{
	struct ns1__getNonsenseSOAP *_p = soap_new_ns1__getNonsenseSOAP(soap);
	if (_p)
	{	soap_default_ns1__getNonsenseSOAP(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getNonsenseSOAP(struct soap*, const struct ns1__getNonsenseSOAP *, const char*, const char*);

inline int soap_write_ns1__getNonsenseSOAP(struct soap *soap, struct ns1__getNonsenseSOAP const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getNonsenseSOAP(soap, p), 0) || soap_put_ns1__getNonsenseSOAP(soap, p, "ns1:getNonsenseSOAP", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getNonsenseSOAP(struct soap *soap, const char *URL, struct ns1__getNonsenseSOAP const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getNonsenseSOAP(soap, p), 0) || soap_put_ns1__getNonsenseSOAP(soap, p, "ns1:getNonsenseSOAP", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getNonsenseSOAP(struct soap *soap, const char *URL, struct ns1__getNonsenseSOAP const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getNonsenseSOAP(soap, p), 0) || soap_put_ns1__getNonsenseSOAP(soap, p, "ns1:getNonsenseSOAP", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getNonsenseSOAP * SOAP_FMAC4 soap_get_ns1__getNonsenseSOAP(struct soap*, struct ns1__getNonsenseSOAP *, const char*, const char*);

inline int soap_read_ns1__getNonsenseSOAP(struct soap *soap, struct ns1__getNonsenseSOAP *p)
{
	if (p)
	{	soap_default_ns1__getNonsenseSOAP(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getNonsenseSOAP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getNonsenseSOAP(struct soap *soap, const char *URL, struct ns1__getNonsenseSOAP *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getNonsenseSOAP(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getNonsenseSOAP(struct soap *soap, struct ns1__getNonsenseSOAP *p)
{
	if (soap_read_ns1__getNonsenseSOAP(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getNonsenseSOAPResponse_DEFINED
#define SOAP_TYPE_ns1__getNonsenseSOAPResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getNonsenseSOAPResponse(struct soap*, struct ns1__getNonsenseSOAPResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getNonsenseSOAPResponse(struct soap*, const struct ns1__getNonsenseSOAPResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getNonsenseSOAPResponse(struct soap*, const char*, int, const struct ns1__getNonsenseSOAPResponse *, const char*);
SOAP_FMAC3 struct ns1__getNonsenseSOAPResponse * SOAP_FMAC4 soap_in_ns1__getNonsenseSOAPResponse(struct soap*, const char*, struct ns1__getNonsenseSOAPResponse *, const char*);
SOAP_FMAC1 struct ns1__getNonsenseSOAPResponse * SOAP_FMAC2 soap_instantiate_ns1__getNonsenseSOAPResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getNonsenseSOAPResponse * soap_new_ns1__getNonsenseSOAPResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getNonsenseSOAPResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__getNonsenseSOAPResponse * soap_new_req_ns1__getNonsenseSOAPResponse(
	struct soap *soap,
	const std::string& return_)
{
	struct ns1__getNonsenseSOAPResponse *_p = soap_new_ns1__getNonsenseSOAPResponse(soap);
	if (_p)
	{	soap_default_ns1__getNonsenseSOAPResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}

inline struct ns1__getNonsenseSOAPResponse * soap_new_set_ns1__getNonsenseSOAPResponse(
	struct soap *soap,
	const std::string& return_)
{
	struct ns1__getNonsenseSOAPResponse *_p = soap_new_ns1__getNonsenseSOAPResponse(soap);
	if (_p)
	{	soap_default_ns1__getNonsenseSOAPResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getNonsenseSOAPResponse(struct soap*, const struct ns1__getNonsenseSOAPResponse *, const char*, const char*);

inline int soap_write_ns1__getNonsenseSOAPResponse(struct soap *soap, struct ns1__getNonsenseSOAPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__getNonsenseSOAPResponse(soap, p), 0) || soap_put_ns1__getNonsenseSOAPResponse(soap, p, "ns1:getNonsenseSOAPResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getNonsenseSOAPResponse(struct soap *soap, const char *URL, struct ns1__getNonsenseSOAPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__getNonsenseSOAPResponse(soap, p), 0) || soap_put_ns1__getNonsenseSOAPResponse(soap, p, "ns1:getNonsenseSOAPResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getNonsenseSOAPResponse(struct soap *soap, const char *URL, struct ns1__getNonsenseSOAPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__getNonsenseSOAPResponse(soap, p), 0) || soap_put_ns1__getNonsenseSOAPResponse(soap, p, "ns1:getNonsenseSOAPResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__getNonsenseSOAPResponse * SOAP_FMAC4 soap_get_ns1__getNonsenseSOAPResponse(struct soap*, struct ns1__getNonsenseSOAPResponse *, const char*, const char*);

inline int soap_read_ns1__getNonsenseSOAPResponse(struct soap *soap, struct ns1__getNonsenseSOAPResponse *p)
{
	if (p)
	{	soap_default_ns1__getNonsenseSOAPResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__getNonsenseSOAPResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getNonsenseSOAPResponse(struct soap *soap, const char *URL, struct ns1__getNonsenseSOAPResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getNonsenseSOAPResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getNonsenseSOAPResponse(struct soap *soap, struct ns1__getNonsenseSOAPResponse *p)
{
	if (soap_read_ns1__getNonsenseSOAPResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__requestConnectionSOAP_DEFINED
#define SOAP_TYPE_ns1__requestConnectionSOAP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__requestConnectionSOAP(struct soap*, struct ns1__requestConnectionSOAP *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__requestConnectionSOAP(struct soap*, const struct ns1__requestConnectionSOAP *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__requestConnectionSOAP(struct soap*, const char*, int, const struct ns1__requestConnectionSOAP *, const char*);
SOAP_FMAC3 struct ns1__requestConnectionSOAP * SOAP_FMAC4 soap_in_ns1__requestConnectionSOAP(struct soap*, const char*, struct ns1__requestConnectionSOAP *, const char*);
SOAP_FMAC1 struct ns1__requestConnectionSOAP * SOAP_FMAC2 soap_instantiate_ns1__requestConnectionSOAP(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__requestConnectionSOAP * soap_new_ns1__requestConnectionSOAP(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__requestConnectionSOAP(soap, n, NULL, NULL, NULL);
}

inline struct ns1__requestConnectionSOAP * soap_new_req_ns1__requestConnectionSOAP(
	struct soap *soap)
{
	struct ns1__requestConnectionSOAP *_p = soap_new_ns1__requestConnectionSOAP(soap);
	if (_p)
	{	soap_default_ns1__requestConnectionSOAP(soap, _p);
	}
	return _p;
}

inline struct ns1__requestConnectionSOAP * soap_new_set_ns1__requestConnectionSOAP(
	struct soap *soap)
{
	struct ns1__requestConnectionSOAP *_p = soap_new_ns1__requestConnectionSOAP(soap);
	if (_p)
	{	soap_default_ns1__requestConnectionSOAP(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__requestConnectionSOAP(struct soap*, const struct ns1__requestConnectionSOAP *, const char*, const char*);

inline int soap_write_ns1__requestConnectionSOAP(struct soap *soap, struct ns1__requestConnectionSOAP const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__requestConnectionSOAP(soap, p), 0) || soap_put_ns1__requestConnectionSOAP(soap, p, "ns1:requestConnectionSOAP", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__requestConnectionSOAP(struct soap *soap, const char *URL, struct ns1__requestConnectionSOAP const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__requestConnectionSOAP(soap, p), 0) || soap_put_ns1__requestConnectionSOAP(soap, p, "ns1:requestConnectionSOAP", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__requestConnectionSOAP(struct soap *soap, const char *URL, struct ns1__requestConnectionSOAP const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__requestConnectionSOAP(soap, p), 0) || soap_put_ns1__requestConnectionSOAP(soap, p, "ns1:requestConnectionSOAP", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__requestConnectionSOAP * SOAP_FMAC4 soap_get_ns1__requestConnectionSOAP(struct soap*, struct ns1__requestConnectionSOAP *, const char*, const char*);

inline int soap_read_ns1__requestConnectionSOAP(struct soap *soap, struct ns1__requestConnectionSOAP *p)
{
	if (p)
	{	soap_default_ns1__requestConnectionSOAP(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__requestConnectionSOAP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__requestConnectionSOAP(struct soap *soap, const char *URL, struct ns1__requestConnectionSOAP *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__requestConnectionSOAP(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__requestConnectionSOAP(struct soap *soap, struct ns1__requestConnectionSOAP *p)
{
	if (soap_read_ns1__requestConnectionSOAP(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__requestConnectionSOAPResponse_DEFINED
#define SOAP_TYPE_ns1__requestConnectionSOAPResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__requestConnectionSOAPResponse(struct soap*, struct ns1__requestConnectionSOAPResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__requestConnectionSOAPResponse(struct soap*, const struct ns1__requestConnectionSOAPResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__requestConnectionSOAPResponse(struct soap*, const char*, int, const struct ns1__requestConnectionSOAPResponse *, const char*);
SOAP_FMAC3 struct ns1__requestConnectionSOAPResponse * SOAP_FMAC4 soap_in_ns1__requestConnectionSOAPResponse(struct soap*, const char*, struct ns1__requestConnectionSOAPResponse *, const char*);
SOAP_FMAC1 struct ns1__requestConnectionSOAPResponse * SOAP_FMAC2 soap_instantiate_ns1__requestConnectionSOAPResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__requestConnectionSOAPResponse * soap_new_ns1__requestConnectionSOAPResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__requestConnectionSOAPResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__requestConnectionSOAPResponse * soap_new_req_ns1__requestConnectionSOAPResponse(
	struct soap *soap,
	bool return_)
{
	struct ns1__requestConnectionSOAPResponse *_p = soap_new_ns1__requestConnectionSOAPResponse(soap);
	if (_p)
	{	soap_default_ns1__requestConnectionSOAPResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}

inline struct ns1__requestConnectionSOAPResponse * soap_new_set_ns1__requestConnectionSOAPResponse(
	struct soap *soap,
	bool return_)
{
	struct ns1__requestConnectionSOAPResponse *_p = soap_new_ns1__requestConnectionSOAPResponse(soap);
	if (_p)
	{	soap_default_ns1__requestConnectionSOAPResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__requestConnectionSOAPResponse(struct soap*, const struct ns1__requestConnectionSOAPResponse *, const char*, const char*);

inline int soap_write_ns1__requestConnectionSOAPResponse(struct soap *soap, struct ns1__requestConnectionSOAPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__requestConnectionSOAPResponse(soap, p), 0) || soap_put_ns1__requestConnectionSOAPResponse(soap, p, "ns1:requestConnectionSOAPResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__requestConnectionSOAPResponse(struct soap *soap, const char *URL, struct ns1__requestConnectionSOAPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__requestConnectionSOAPResponse(soap, p), 0) || soap_put_ns1__requestConnectionSOAPResponse(soap, p, "ns1:requestConnectionSOAPResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__requestConnectionSOAPResponse(struct soap *soap, const char *URL, struct ns1__requestConnectionSOAPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__requestConnectionSOAPResponse(soap, p), 0) || soap_put_ns1__requestConnectionSOAPResponse(soap, p, "ns1:requestConnectionSOAPResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__requestConnectionSOAPResponse * SOAP_FMAC4 soap_get_ns1__requestConnectionSOAPResponse(struct soap*, struct ns1__requestConnectionSOAPResponse *, const char*, const char*);

inline int soap_read_ns1__requestConnectionSOAPResponse(struct soap *soap, struct ns1__requestConnectionSOAPResponse *p)
{
	if (p)
	{	soap_default_ns1__requestConnectionSOAPResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__requestConnectionSOAPResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__requestConnectionSOAPResponse(struct soap *soap, const char *URL, struct ns1__requestConnectionSOAPResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__requestConnectionSOAPResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__requestConnectionSOAPResponse(struct soap *soap, struct ns1__requestConnectionSOAPResponse *p)
{
	if (soap_read_ns1__requestConnectionSOAPResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__transferDataSOAP_DEFINED
#define SOAP_TYPE_ns1__transferDataSOAP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__transferDataSOAP(struct soap*, struct ns1__transferDataSOAP *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__transferDataSOAP(struct soap*, const struct ns1__transferDataSOAP *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__transferDataSOAP(struct soap*, const char*, int, const struct ns1__transferDataSOAP *, const char*);
SOAP_FMAC3 struct ns1__transferDataSOAP * SOAP_FMAC4 soap_in_ns1__transferDataSOAP(struct soap*, const char*, struct ns1__transferDataSOAP *, const char*);
SOAP_FMAC1 struct ns1__transferDataSOAP * SOAP_FMAC2 soap_instantiate_ns1__transferDataSOAP(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__transferDataSOAP * soap_new_ns1__transferDataSOAP(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__transferDataSOAP(soap, n, NULL, NULL, NULL);
}

inline struct ns1__transferDataSOAP * soap_new_req_ns1__transferDataSOAP(
	struct soap *soap,
	const std::string& _arg0,
	const std::string& _arg1,
	const std::string& _arg2,
	int _arg3)
{
	struct ns1__transferDataSOAP *_p = soap_new_ns1__transferDataSOAP(soap);
	if (_p)
	{	soap_default_ns1__transferDataSOAP(soap, _p);
		_p->_arg0 = _arg0;
		_p->_arg1 = _arg1;
		_p->_arg2 = _arg2;
		_p->_arg3 = _arg3;
	}
	return _p;
}

inline struct ns1__transferDataSOAP * soap_new_set_ns1__transferDataSOAP(
	struct soap *soap,
	const std::string& _arg0,
	const std::string& _arg1,
	const std::string& _arg2,
	int _arg3)
{
	struct ns1__transferDataSOAP *_p = soap_new_ns1__transferDataSOAP(soap);
	if (_p)
	{	soap_default_ns1__transferDataSOAP(soap, _p);
		_p->_arg0 = _arg0;
		_p->_arg1 = _arg1;
		_p->_arg2 = _arg2;
		_p->_arg3 = _arg3;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__transferDataSOAP(struct soap*, const struct ns1__transferDataSOAP *, const char*, const char*);

inline int soap_write_ns1__transferDataSOAP(struct soap *soap, struct ns1__transferDataSOAP const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__transferDataSOAP(soap, p), 0) || soap_put_ns1__transferDataSOAP(soap, p, "ns1:transferDataSOAP", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__transferDataSOAP(struct soap *soap, const char *URL, struct ns1__transferDataSOAP const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__transferDataSOAP(soap, p), 0) || soap_put_ns1__transferDataSOAP(soap, p, "ns1:transferDataSOAP", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__transferDataSOAP(struct soap *soap, const char *URL, struct ns1__transferDataSOAP const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__transferDataSOAP(soap, p), 0) || soap_put_ns1__transferDataSOAP(soap, p, "ns1:transferDataSOAP", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__transferDataSOAP * SOAP_FMAC4 soap_get_ns1__transferDataSOAP(struct soap*, struct ns1__transferDataSOAP *, const char*, const char*);

inline int soap_read_ns1__transferDataSOAP(struct soap *soap, struct ns1__transferDataSOAP *p)
{
	if (p)
	{	soap_default_ns1__transferDataSOAP(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__transferDataSOAP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__transferDataSOAP(struct soap *soap, const char *URL, struct ns1__transferDataSOAP *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__transferDataSOAP(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__transferDataSOAP(struct soap *soap, struct ns1__transferDataSOAP *p)
{
	if (soap_read_ns1__transferDataSOAP(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__transferDataSOAPResponse_DEFINED
#define SOAP_TYPE_ns1__transferDataSOAPResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__transferDataSOAPResponse(struct soap*, struct ns1__transferDataSOAPResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__transferDataSOAPResponse(struct soap*, const struct ns1__transferDataSOAPResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__transferDataSOAPResponse(struct soap*, const char*, int, const struct ns1__transferDataSOAPResponse *, const char*);
SOAP_FMAC3 struct ns1__transferDataSOAPResponse * SOAP_FMAC4 soap_in_ns1__transferDataSOAPResponse(struct soap*, const char*, struct ns1__transferDataSOAPResponse *, const char*);
SOAP_FMAC1 struct ns1__transferDataSOAPResponse * SOAP_FMAC2 soap_instantiate_ns1__transferDataSOAPResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__transferDataSOAPResponse * soap_new_ns1__transferDataSOAPResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__transferDataSOAPResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns1__transferDataSOAPResponse * soap_new_req_ns1__transferDataSOAPResponse(
	struct soap *soap,
	bool _return_)
{
	struct ns1__transferDataSOAPResponse *_p = soap_new_ns1__transferDataSOAPResponse(soap);
	if (_p)
	{	soap_default_ns1__transferDataSOAPResponse(soap, _p);
		_p->_return_ = _return_;
	}
	return _p;
}

inline struct ns1__transferDataSOAPResponse * soap_new_set_ns1__transferDataSOAPResponse(
	struct soap *soap,
	bool _return_)
{
	struct ns1__transferDataSOAPResponse *_p = soap_new_ns1__transferDataSOAPResponse(soap);
	if (_p)
	{	soap_default_ns1__transferDataSOAPResponse(soap, _p);
		_p->_return_ = _return_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__transferDataSOAPResponse(struct soap*, const struct ns1__transferDataSOAPResponse *, const char*, const char*);

inline int soap_write_ns1__transferDataSOAPResponse(struct soap *soap, struct ns1__transferDataSOAPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_ns1__transferDataSOAPResponse(soap, p), 0) || soap_put_ns1__transferDataSOAPResponse(soap, p, "ns1:transferDataSOAPResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__transferDataSOAPResponse(struct soap *soap, const char *URL, struct ns1__transferDataSOAPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_ns1__transferDataSOAPResponse(soap, p), 0) || soap_put_ns1__transferDataSOAPResponse(soap, p, "ns1:transferDataSOAPResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__transferDataSOAPResponse(struct soap *soap, const char *URL, struct ns1__transferDataSOAPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_ns1__transferDataSOAPResponse(soap, p), 0) || soap_put_ns1__transferDataSOAPResponse(soap, p, "ns1:transferDataSOAPResponse", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct ns1__transferDataSOAPResponse * SOAP_FMAC4 soap_get_ns1__transferDataSOAPResponse(struct soap*, struct ns1__transferDataSOAPResponse *, const char*, const char*);

inline int soap_read_ns1__transferDataSOAPResponse(struct soap *soap, struct ns1__transferDataSOAPResponse *p)
{
	if (p)
	{	soap_default_ns1__transferDataSOAPResponse(soap, p);
		if (soap_begin_recv(soap) || soap_get_ns1__transferDataSOAPResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__transferDataSOAPResponse(struct soap *soap, const char *URL, struct ns1__transferDataSOAPResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__transferDataSOAPResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__transferDataSOAPResponse(struct soap *soap, struct ns1__transferDataSOAPResponse *p)
{
	if (soap_read_ns1__transferDataSOAPResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	ns1__NoSuchAlgorithmException *ns1__NoSuchAlgorithmException_,
	int __type,
	void *fault,
	char *__any)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->ns1__NoSuchAlgorithmException_ = ns1__NoSuchAlgorithmException_;
		_p->__type = __type;
		_p->fault = fault;
		_p->__any = __any;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Detail(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTons1__NoSuchAlgorithmException_DEFINED
#define SOAP_TYPE_PointerTons1__NoSuchAlgorithmException_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__NoSuchAlgorithmException(struct soap*, ns1__NoSuchAlgorithmException *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__NoSuchAlgorithmException(struct soap*, const char *, int, ns1__NoSuchAlgorithmException *const*, const char *);
SOAP_FMAC3 ns1__NoSuchAlgorithmException ** SOAP_FMAC4 soap_in_PointerTons1__NoSuchAlgorithmException(struct soap*, const char*, ns1__NoSuchAlgorithmException **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__NoSuchAlgorithmException(struct soap*, ns1__NoSuchAlgorithmException *const*, const char*, const char*);
SOAP_FMAC3 ns1__NoSuchAlgorithmException ** SOAP_FMAC4 soap_get_PointerTons1__NoSuchAlgorithmException(struct soap*, ns1__NoSuchAlgorithmException **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new__QName(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__QName(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (soap_read__QName(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_string(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (soap_read_string(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

/* End of soapH.h */
