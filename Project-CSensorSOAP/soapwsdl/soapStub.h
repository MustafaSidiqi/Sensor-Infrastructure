/* soapStub.h
   Generated by gSOAP 2.8.41 for csensorwsdl.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <deque>
#include <list>
#include <vector>
#include <set>
#define SOAP_NAMESPACE_OF_ns1	"http://dockingsystem/"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20841
# error "GSOAP VERSION 20841 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class ns1__NoSuchAlgorithmException;	/* csensorwsdl.h:148 */
struct ns1__transferDataSOAPResponse;	/* csensorwsdl.h:341 */
struct ns1__transferDataSOAP;	/* csensorwsdl.h:411 */
struct ns1__requestConnectionSOAPResponse;	/* csensorwsdl.h:422 */
struct ns1__requestConnectionSOAP;	/* csensorwsdl.h:480 */
struct ns1__getNonsenseSOAPResponse;	/* csensorwsdl.h:491 */
struct ns1__getNonsenseSOAP;	/* csensorwsdl.h:549 */
struct ns1__getPublicKeySOAPResponse;	/* csensorwsdl.h:560 */
struct ns1__getPublicKeySOAP;	/* csensorwsdl.h:623 */
struct ns1__sendCipherInonsenseSOAPResponse;	/* csensorwsdl.h:634 */
struct ns1__sendCipherInonsenseSOAP;	/* csensorwsdl.h:694 */
struct ns1__sendLogHashCipherSOAPResponse;	/* csensorwsdl.h:705 */
struct ns1__sendLogHashCipherSOAP;	/* csensorwsdl.h:765 */
struct ns1__recieveOKSOAPResponse;	/* csensorwsdl.h:776 */
struct ns1__recieveOKSOAP;	/* csensorwsdl.h:839 */

/* csensorwsdl.h:148 */
#ifndef SOAP_TYPE_ns1__NoSuchAlgorithmException
#define SOAP_TYPE_ns1__NoSuchAlgorithmException (11)
/* complex XSD type 'ns1:NoSuchAlgorithmException': */
class SOAP_CMAC ns1__NoSuchAlgorithmException {
      public:
        /// Optional element 'message' of XSD type 'xsd:string'
        std::string *message;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__NoSuchAlgorithmException
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__NoSuchAlgorithmException; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__NoSuchAlgorithmException, default initialized and not managed by a soap context
        virtual ns1__NoSuchAlgorithmException *soap_alloc(void) const { return SOAP_NEW(ns1__NoSuchAlgorithmException); }
      public:
        /// Constructor with initializations
        ns1__NoSuchAlgorithmException()
        {
          message = (std::string *)0;
          soap = (struct soap *)0;
        }
        virtual ~ns1__NoSuchAlgorithmException() { }
        /// Friend allocator used by soap_new_ns1__NoSuchAlgorithmException(struct soap*, int)
        friend SOAP_FMAC1 ns1__NoSuchAlgorithmException * SOAP_FMAC2 soap_instantiate_ns1__NoSuchAlgorithmException(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* csensorwsdl.h:314 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (15)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        /** Optional element 'ns1:NoSuchAlgorithmException' of XSD type 'ns1:NoSuchAlgorithmException' */
        ns1__NoSuchAlgorithmException *ns1__NoSuchAlgorithmException_;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
        char *__any;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail()
        {
          ns1__NoSuchAlgorithmException_ = (ns1__NoSuchAlgorithmException *)0;
          __type = 0;
          fault = NULL;
          __any = (char *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Detail(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* csensorwsdl.h:341 */
#ifndef SOAP_TYPE_ns1__transferDataSOAPResponse
#define SOAP_TYPE_ns1__transferDataSOAPResponse (19)
/* complex XSD type 'ns1:transferDataSOAPResponse': */
struct SOAP_CMAC ns1__transferDataSOAPResponse {
      public:
        /** Required element 'return' of XSD type 'xsd:boolean' */
        bool _return_;
      public:
        /** Return unique type id SOAP_TYPE_ns1__transferDataSOAPResponse */
        int soap_type() const { return SOAP_TYPE_ns1__transferDataSOAPResponse; }
        /** Constructor with member initializations */
        ns1__transferDataSOAPResponse()
        {
          _return_ = (bool)0;
        }
        /** Friend allocator used by soap_new_ns1__transferDataSOAPResponse(struct soap*, int) */
        friend SOAP_FMAC1 ns1__transferDataSOAPResponse * SOAP_FMAC2 soap_instantiate_ns1__transferDataSOAPResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* csensorwsdl.h:411 */
#ifndef SOAP_TYPE_ns1__transferDataSOAP
#define SOAP_TYPE_ns1__transferDataSOAP (23)
/* complex XSD type 'ns1:transferDataSOAP': */
struct SOAP_CMAC ns1__transferDataSOAP {
      public:
        /** Required element 'arg0' of XSD type 'xsd:string' */
        std::string _arg0;
        /** Required element 'arg1' of XSD type 'xsd:string' */
        std::string _arg1;
        /** Required element 'arg2' of XSD type 'xsd:string' */
        std::string _arg2;
        /** Required element 'arg3' of XSD type 'xsd:int' */
        int _arg3;
      public:
        /** Return unique type id SOAP_TYPE_ns1__transferDataSOAP */
        int soap_type() const { return SOAP_TYPE_ns1__transferDataSOAP; }
        /** Constructor with member initializations */
        ns1__transferDataSOAP()
        {
          _arg3 = (int)0;
        }
        /** Friend allocator used by soap_new_ns1__transferDataSOAP(struct soap*, int) */
        friend SOAP_FMAC1 ns1__transferDataSOAP * SOAP_FMAC2 soap_instantiate_ns1__transferDataSOAP(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* csensorwsdl.h:422 */
#ifndef SOAP_TYPE_ns1__requestConnectionSOAPResponse
#define SOAP_TYPE_ns1__requestConnectionSOAPResponse (24)
/* complex XSD type 'ns1:requestConnectionSOAPResponse': */
struct SOAP_CMAC ns1__requestConnectionSOAPResponse {
      public:
        /** Required element 'return' of XSD type 'xsd:boolean' */
        bool return_;
      public:
        /** Return unique type id SOAP_TYPE_ns1__requestConnectionSOAPResponse */
        int soap_type() const { return SOAP_TYPE_ns1__requestConnectionSOAPResponse; }
        /** Constructor with member initializations */
        ns1__requestConnectionSOAPResponse()
        {
          return_ = (bool)0;
        }
        /** Friend allocator used by soap_new_ns1__requestConnectionSOAPResponse(struct soap*, int) */
        friend SOAP_FMAC1 ns1__requestConnectionSOAPResponse * SOAP_FMAC2 soap_instantiate_ns1__requestConnectionSOAPResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* csensorwsdl.h:480 */
#ifndef SOAP_TYPE_ns1__requestConnectionSOAP
#define SOAP_TYPE_ns1__requestConnectionSOAP (27)
/* complex XSD type 'ns1:requestConnectionSOAP': */
struct SOAP_CMAC ns1__requestConnectionSOAP {
      public:
        /** Return unique type id SOAP_TYPE_ns1__requestConnectionSOAP */
        int soap_type() const { return SOAP_TYPE_ns1__requestConnectionSOAP; }
        /** Constructor with member initializations */
        ns1__requestConnectionSOAP()
        {
        }
        /** Friend allocator used by soap_new_ns1__requestConnectionSOAP(struct soap*, int) */
        friend SOAP_FMAC1 ns1__requestConnectionSOAP * SOAP_FMAC2 soap_instantiate_ns1__requestConnectionSOAP(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* csensorwsdl.h:491 */
#ifndef SOAP_TYPE_ns1__getNonsenseSOAPResponse
#define SOAP_TYPE_ns1__getNonsenseSOAPResponse (28)
/* complex XSD type 'ns1:getNonsenseSOAPResponse': */
struct SOAP_CMAC ns1__getNonsenseSOAPResponse {
      public:
        /** Required element 'return' of XSD type 'xsd:string' */
        std::string return_;
      public:
        /** Return unique type id SOAP_TYPE_ns1__getNonsenseSOAPResponse */
        int soap_type() const { return SOAP_TYPE_ns1__getNonsenseSOAPResponse; }
        /** Constructor with member initializations */
        ns1__getNonsenseSOAPResponse()
        {
        }
        /** Friend allocator used by soap_new_ns1__getNonsenseSOAPResponse(struct soap*, int) */
        friend SOAP_FMAC1 ns1__getNonsenseSOAPResponse * SOAP_FMAC2 soap_instantiate_ns1__getNonsenseSOAPResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* csensorwsdl.h:549 */
#ifndef SOAP_TYPE_ns1__getNonsenseSOAP
#define SOAP_TYPE_ns1__getNonsenseSOAP (31)
/* complex XSD type 'ns1:getNonsenseSOAP': */
struct SOAP_CMAC ns1__getNonsenseSOAP {
      public:
        /** Return unique type id SOAP_TYPE_ns1__getNonsenseSOAP */
        int soap_type() const { return SOAP_TYPE_ns1__getNonsenseSOAP; }
        /** Constructor with member initializations */
        ns1__getNonsenseSOAP()
        {
        }
        /** Friend allocator used by soap_new_ns1__getNonsenseSOAP(struct soap*, int) */
        friend SOAP_FMAC1 ns1__getNonsenseSOAP * SOAP_FMAC2 soap_instantiate_ns1__getNonsenseSOAP(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* csensorwsdl.h:560 */
#ifndef SOAP_TYPE_ns1__getPublicKeySOAPResponse
#define SOAP_TYPE_ns1__getPublicKeySOAPResponse (32)
/* complex XSD type 'ns1:getPublicKeySOAPResponse': */
struct SOAP_CMAC ns1__getPublicKeySOAPResponse {
      public:
        /** Required element 'return' of XSD type 'xsd:string' */
        std::string return_;
      public:
        /** Return unique type id SOAP_TYPE_ns1__getPublicKeySOAPResponse */
        int soap_type() const { return SOAP_TYPE_ns1__getPublicKeySOAPResponse; }
        /** Constructor with member initializations */
        ns1__getPublicKeySOAPResponse()
        {
        }
        /** Friend allocator used by soap_new_ns1__getPublicKeySOAPResponse(struct soap*, int) */
        friend SOAP_FMAC1 ns1__getPublicKeySOAPResponse * SOAP_FMAC2 soap_instantiate_ns1__getPublicKeySOAPResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* csensorwsdl.h:623 */
#ifndef SOAP_TYPE_ns1__getPublicKeySOAP
#define SOAP_TYPE_ns1__getPublicKeySOAP (35)
/* complex XSD type 'ns1:getPublicKeySOAP': */
struct SOAP_CMAC ns1__getPublicKeySOAP {
      public:
        /** Return unique type id SOAP_TYPE_ns1__getPublicKeySOAP */
        int soap_type() const { return SOAP_TYPE_ns1__getPublicKeySOAP; }
        /** Constructor with member initializations */
        ns1__getPublicKeySOAP()
        {
        }
        /** Friend allocator used by soap_new_ns1__getPublicKeySOAP(struct soap*, int) */
        friend SOAP_FMAC1 ns1__getPublicKeySOAP * SOAP_FMAC2 soap_instantiate_ns1__getPublicKeySOAP(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* csensorwsdl.h:634 */
#ifndef SOAP_TYPE_ns1__sendCipherInonsenseSOAPResponse
#define SOAP_TYPE_ns1__sendCipherInonsenseSOAPResponse (36)
/* complex XSD type 'ns1:sendCipherInonsenseSOAPResponse': */
struct SOAP_CMAC ns1__sendCipherInonsenseSOAPResponse {
      public:
        /** Return unique type id SOAP_TYPE_ns1__sendCipherInonsenseSOAPResponse */
        int soap_type() const { return SOAP_TYPE_ns1__sendCipherInonsenseSOAPResponse; }
        /** Constructor with member initializations */
        ns1__sendCipherInonsenseSOAPResponse()
        {
        }
        /** Friend allocator used by soap_new_ns1__sendCipherInonsenseSOAPResponse(struct soap*, int) */
        friend SOAP_FMAC1 ns1__sendCipherInonsenseSOAPResponse * SOAP_FMAC2 soap_instantiate_ns1__sendCipherInonsenseSOAPResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* csensorwsdl.h:694 */
#ifndef SOAP_TYPE_ns1__sendCipherInonsenseSOAP
#define SOAP_TYPE_ns1__sendCipherInonsenseSOAP (39)
/* complex XSD type 'ns1:sendCipherInonsenseSOAP': */
struct SOAP_CMAC ns1__sendCipherInonsenseSOAP {
      public:
        /** Required element 'arg0' of XSD type 'xsd:string' */
        std::string arg0;
      public:
        /** Return unique type id SOAP_TYPE_ns1__sendCipherInonsenseSOAP */
        int soap_type() const { return SOAP_TYPE_ns1__sendCipherInonsenseSOAP; }
        /** Constructor with member initializations */
        ns1__sendCipherInonsenseSOAP()
        {
        }
        /** Friend allocator used by soap_new_ns1__sendCipherInonsenseSOAP(struct soap*, int) */
        friend SOAP_FMAC1 ns1__sendCipherInonsenseSOAP * SOAP_FMAC2 soap_instantiate_ns1__sendCipherInonsenseSOAP(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* csensorwsdl.h:705 */
#ifndef SOAP_TYPE_ns1__sendLogHashCipherSOAPResponse
#define SOAP_TYPE_ns1__sendLogHashCipherSOAPResponse (40)
/* complex XSD type 'ns1:sendLogHashCipherSOAPResponse': */
struct SOAP_CMAC ns1__sendLogHashCipherSOAPResponse {
      public:
        /** Return unique type id SOAP_TYPE_ns1__sendLogHashCipherSOAPResponse */
        int soap_type() const { return SOAP_TYPE_ns1__sendLogHashCipherSOAPResponse; }
        /** Constructor with member initializations */
        ns1__sendLogHashCipherSOAPResponse()
        {
        }
        /** Friend allocator used by soap_new_ns1__sendLogHashCipherSOAPResponse(struct soap*, int) */
        friend SOAP_FMAC1 ns1__sendLogHashCipherSOAPResponse * SOAP_FMAC2 soap_instantiate_ns1__sendLogHashCipherSOAPResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* csensorwsdl.h:765 */
#ifndef SOAP_TYPE_ns1__sendLogHashCipherSOAP
#define SOAP_TYPE_ns1__sendLogHashCipherSOAP (43)
/* complex XSD type 'ns1:sendLogHashCipherSOAP': */
struct SOAP_CMAC ns1__sendLogHashCipherSOAP {
      public:
        /** Required element 'arg0' of XSD type 'xsd:string' */
        std::string arg0;
      public:
        /** Return unique type id SOAP_TYPE_ns1__sendLogHashCipherSOAP */
        int soap_type() const { return SOAP_TYPE_ns1__sendLogHashCipherSOAP; }
        /** Constructor with member initializations */
        ns1__sendLogHashCipherSOAP()
        {
        }
        /** Friend allocator used by soap_new_ns1__sendLogHashCipherSOAP(struct soap*, int) */
        friend SOAP_FMAC1 ns1__sendLogHashCipherSOAP * SOAP_FMAC2 soap_instantiate_ns1__sendLogHashCipherSOAP(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* csensorwsdl.h:776 */
#ifndef SOAP_TYPE_ns1__recieveOKSOAPResponse
#define SOAP_TYPE_ns1__recieveOKSOAPResponse (44)
/* complex XSD type 'ns1:recieveOKSOAPResponse': */
struct SOAP_CMAC ns1__recieveOKSOAPResponse {
      public:
        /** Required element 'return' of XSD type 'xsd:boolean' */
        bool return_;
      public:
        /** Return unique type id SOAP_TYPE_ns1__recieveOKSOAPResponse */
        int soap_type() const { return SOAP_TYPE_ns1__recieveOKSOAPResponse; }
        /** Constructor with member initializations */
        ns1__recieveOKSOAPResponse()
        {
          return_ = (bool)0;
        }
        /** Friend allocator used by soap_new_ns1__recieveOKSOAPResponse(struct soap*, int) */
        friend SOAP_FMAC1 ns1__recieveOKSOAPResponse * SOAP_FMAC2 soap_instantiate_ns1__recieveOKSOAPResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* csensorwsdl.h:839 */
#ifndef SOAP_TYPE_ns1__recieveOKSOAP
#define SOAP_TYPE_ns1__recieveOKSOAP (47)
/* complex XSD type 'ns1:recieveOKSOAP': */
struct SOAP_CMAC ns1__recieveOKSOAP {
      public:
        /** Return unique type id SOAP_TYPE_ns1__recieveOKSOAP */
        int soap_type() const { return SOAP_TYPE_ns1__recieveOKSOAP; }
        /** Constructor with member initializations */
        ns1__recieveOKSOAP()
        {
        }
        /** Friend allocator used by soap_new_ns1__recieveOKSOAP(struct soap*, int) */
        friend SOAP_FMAC1 ns1__recieveOKSOAP * SOAP_FMAC2 soap_instantiate_ns1__recieveOKSOAP(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* csensorwsdl.h:904 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (48)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header()
        {
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Header(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* csensorwsdl.h:904 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (49)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XSD type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code()
        {
          SOAP_ENV__Value = (char *)0;
          SOAP_ENV__Subcode = (struct SOAP_ENV__Code *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Code(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* csensorwsdl.h:904 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (51)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XSD type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason()
        {
          SOAP_ENV__Text = (char *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Reason(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* csensorwsdl.h:904 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (52)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XSD type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XSD type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XSD type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XSD type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XSD type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XSD type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault()
        {
          faultcode = (char *)0;
          faultstring = (char *)0;
          faultactor = (char *)0;
          detail = (struct SOAP_ENV__Detail *)0;
          SOAP_ENV__Code = (struct SOAP_ENV__Code *)0;
          SOAP_ENV__Reason = (struct SOAP_ENV__Reason *)0;
          SOAP_ENV__Node = (char *)0;
          SOAP_ENV__Role = (char *)0;
          SOAP_ENV__Detail = (struct SOAP_ENV__Detail *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Fault(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* csensorwsdl.h:102 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

/* csensorwsdl.h:102 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* bool has binding name 'bool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (20)
#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (12)
#endif

/* ns1__NoSuchAlgorithmException has binding name 'ns1__NoSuchAlgorithmException' for type 'ns1:NoSuchAlgorithmException' */
#ifndef SOAP_TYPE_ns1__NoSuchAlgorithmException
#define SOAP_TYPE_ns1__NoSuchAlgorithmException (11)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (52)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (51)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (49)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (48)
#endif

/* struct ns1__recieveOKSOAP has binding name 'ns1__recieveOKSOAP' for type 'ns1:recieveOKSOAP' */
#ifndef SOAP_TYPE_ns1__recieveOKSOAP
#define SOAP_TYPE_ns1__recieveOKSOAP (47)
#endif

/* struct ns1__recieveOKSOAPResponse has binding name 'ns1__recieveOKSOAPResponse' for type 'ns1:recieveOKSOAPResponse' */
#ifndef SOAP_TYPE_ns1__recieveOKSOAPResponse
#define SOAP_TYPE_ns1__recieveOKSOAPResponse (44)
#endif

/* struct ns1__sendLogHashCipherSOAP has binding name 'ns1__sendLogHashCipherSOAP' for type 'ns1:sendLogHashCipherSOAP' */
#ifndef SOAP_TYPE_ns1__sendLogHashCipherSOAP
#define SOAP_TYPE_ns1__sendLogHashCipherSOAP (43)
#endif

/* struct ns1__sendLogHashCipherSOAPResponse has binding name 'ns1__sendLogHashCipherSOAPResponse' for type 'ns1:sendLogHashCipherSOAPResponse' */
#ifndef SOAP_TYPE_ns1__sendLogHashCipherSOAPResponse
#define SOAP_TYPE_ns1__sendLogHashCipherSOAPResponse (40)
#endif

/* struct ns1__sendCipherInonsenseSOAP has binding name 'ns1__sendCipherInonsenseSOAP' for type 'ns1:sendCipherInonsenseSOAP' */
#ifndef SOAP_TYPE_ns1__sendCipherInonsenseSOAP
#define SOAP_TYPE_ns1__sendCipherInonsenseSOAP (39)
#endif

/* struct ns1__sendCipherInonsenseSOAPResponse has binding name 'ns1__sendCipherInonsenseSOAPResponse' for type 'ns1:sendCipherInonsenseSOAPResponse' */
#ifndef SOAP_TYPE_ns1__sendCipherInonsenseSOAPResponse
#define SOAP_TYPE_ns1__sendCipherInonsenseSOAPResponse (36)
#endif

/* struct ns1__getPublicKeySOAP has binding name 'ns1__getPublicKeySOAP' for type 'ns1:getPublicKeySOAP' */
#ifndef SOAP_TYPE_ns1__getPublicKeySOAP
#define SOAP_TYPE_ns1__getPublicKeySOAP (35)
#endif

/* struct ns1__getPublicKeySOAPResponse has binding name 'ns1__getPublicKeySOAPResponse' for type 'ns1:getPublicKeySOAPResponse' */
#ifndef SOAP_TYPE_ns1__getPublicKeySOAPResponse
#define SOAP_TYPE_ns1__getPublicKeySOAPResponse (32)
#endif

/* struct ns1__getNonsenseSOAP has binding name 'ns1__getNonsenseSOAP' for type 'ns1:getNonsenseSOAP' */
#ifndef SOAP_TYPE_ns1__getNonsenseSOAP
#define SOAP_TYPE_ns1__getNonsenseSOAP (31)
#endif

/* struct ns1__getNonsenseSOAPResponse has binding name 'ns1__getNonsenseSOAPResponse' for type 'ns1:getNonsenseSOAPResponse' */
#ifndef SOAP_TYPE_ns1__getNonsenseSOAPResponse
#define SOAP_TYPE_ns1__getNonsenseSOAPResponse (28)
#endif

/* struct ns1__requestConnectionSOAP has binding name 'ns1__requestConnectionSOAP' for type 'ns1:requestConnectionSOAP' */
#ifndef SOAP_TYPE_ns1__requestConnectionSOAP
#define SOAP_TYPE_ns1__requestConnectionSOAP (27)
#endif

/* struct ns1__requestConnectionSOAPResponse has binding name 'ns1__requestConnectionSOAPResponse' for type 'ns1:requestConnectionSOAPResponse' */
#ifndef SOAP_TYPE_ns1__requestConnectionSOAPResponse
#define SOAP_TYPE_ns1__requestConnectionSOAPResponse (24)
#endif

/* struct ns1__transferDataSOAP has binding name 'ns1__transferDataSOAP' for type 'ns1:transferDataSOAP' */
#ifndef SOAP_TYPE_ns1__transferDataSOAP
#define SOAP_TYPE_ns1__transferDataSOAP (23)
#endif

/* struct ns1__transferDataSOAPResponse has binding name 'ns1__transferDataSOAPResponse' for type 'ns1:transferDataSOAPResponse' */
#ifndef SOAP_TYPE_ns1__transferDataSOAPResponse
#define SOAP_TYPE_ns1__transferDataSOAPResponse (19)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (15)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (54)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (53)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (50)
#endif

/* ns1__NoSuchAlgorithmException * has binding name 'PointerTons1__NoSuchAlgorithmException' for type 'ns1:NoSuchAlgorithmException' */
#ifndef SOAP_TYPE_PointerTons1__NoSuchAlgorithmException
#define SOAP_TYPE_PointerTons1__NoSuchAlgorithmException (16)
#endif

/* std::string * has binding name 'PointerTostd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (13)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stub Functions                                            *
 *                                                                            *
\******************************************************************************/

    SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__transferDataSOAP(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _arg0, std::string _arg1, std::string _arg2, int _arg3, struct ns1__transferDataSOAPResponse &_param_1);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__requestConnectionSOAP(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns1__requestConnectionSOAPResponse &_param_1);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__getNonsenseSOAP(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns1__getNonsenseSOAPResponse &_param_1);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__getPublicKeySOAP(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns1__getPublicKeySOAPResponse &_param_1);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__sendCipherInonsenseSOAP(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string arg0, struct ns1__sendCipherInonsenseSOAPResponse &_param_1);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__sendLogHashCipherSOAP(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string arg0, struct ns1__sendLogHashCipherSOAPResponse &_param_1);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__recieveOKSOAP(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns1__recieveOKSOAPResponse &_param_1);

/******************************************************************************\
 *                                                                            *
 * Server-Side Operations                                                     *
 *                                                                            *
\******************************************************************************/

    /** Web service operation 'ns1__transferDataSOAP' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 ns1__transferDataSOAP(struct soap*, std::string _arg0, std::string _arg1, std::string _arg2, int _arg3, struct ns1__transferDataSOAPResponse &_param_1);
    /** Web service operation 'ns1__requestConnectionSOAP' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 ns1__requestConnectionSOAP(struct soap*, struct ns1__requestConnectionSOAPResponse &_param_1);
    /** Web service operation 'ns1__getNonsenseSOAP' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 ns1__getNonsenseSOAP(struct soap*, struct ns1__getNonsenseSOAPResponse &_param_1);
    /** Web service operation 'ns1__getPublicKeySOAP' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 ns1__getPublicKeySOAP(struct soap*, struct ns1__getPublicKeySOAPResponse &_param_1);
    /** Web service operation 'ns1__sendCipherInonsenseSOAP' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 ns1__sendCipherInonsenseSOAP(struct soap*, std::string arg0, struct ns1__sendCipherInonsenseSOAPResponse &_param_1);
    /** Web service operation 'ns1__sendLogHashCipherSOAP' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 ns1__sendLogHashCipherSOAP(struct soap*, std::string arg0, struct ns1__sendLogHashCipherSOAPResponse &_param_1);
    /** Web service operation 'ns1__recieveOKSOAP' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 ns1__recieveOKSOAP(struct soap*, struct ns1__recieveOKSOAPResponse &_param_1);

/******************************************************************************\
 *                                                                            *
 * Server-Side Skeletons to Invoke Service Operations                         *
 *                                                                            *
\******************************************************************************/

extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__transferDataSOAP(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__requestConnectionSOAP(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__getNonsenseSOAP(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__getPublicKeySOAP(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__sendCipherInonsenseSOAP(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__sendLogHashCipherSOAP(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__recieveOKSOAP(struct soap*);

#endif

/* End of soapStub.h */
