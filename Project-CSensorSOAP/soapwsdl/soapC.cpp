/* soapC.cpp
   Generated by gSOAP 2.8.41 for csensorwsdl.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.41 2017-05-05 15:57:28 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ns1__NoSuchAlgorithmException:
		return soap_in_ns1__NoSuchAlgorithmException(soap, NULL, NULL, "ns1:NoSuchAlgorithmException");
	case SOAP_TYPE_ns1__recieveOKSOAP:
		return soap_in_ns1__recieveOKSOAP(soap, NULL, NULL, "ns1:recieveOKSOAP");
	case SOAP_TYPE_ns1__recieveOKSOAPResponse:
		return soap_in_ns1__recieveOKSOAPResponse(soap, NULL, NULL, "ns1:recieveOKSOAPResponse");
	case SOAP_TYPE_ns1__sendLogHashCipherSOAP:
		return soap_in_ns1__sendLogHashCipherSOAP(soap, NULL, NULL, "ns1:sendLogHashCipherSOAP");
	case SOAP_TYPE_ns1__sendLogHashCipherSOAPResponse:
		return soap_in_ns1__sendLogHashCipherSOAPResponse(soap, NULL, NULL, "ns1:sendLogHashCipherSOAPResponse");
	case SOAP_TYPE_ns1__sendCipherInonsenseSOAP:
		return soap_in_ns1__sendCipherInonsenseSOAP(soap, NULL, NULL, "ns1:sendCipherInonsenseSOAP");
	case SOAP_TYPE_ns1__sendCipherInonsenseSOAPResponse:
		return soap_in_ns1__sendCipherInonsenseSOAPResponse(soap, NULL, NULL, "ns1:sendCipherInonsenseSOAPResponse");
	case SOAP_TYPE_ns1__getPublicKeySOAP:
		return soap_in_ns1__getPublicKeySOAP(soap, NULL, NULL, "ns1:getPublicKeySOAP");
	case SOAP_TYPE_ns1__getPublicKeySOAPResponse:
		return soap_in_ns1__getPublicKeySOAPResponse(soap, NULL, NULL, "ns1:getPublicKeySOAPResponse");
	case SOAP_TYPE_ns1__getNonsenseSOAP:
		return soap_in_ns1__getNonsenseSOAP(soap, NULL, NULL, "ns1:getNonsenseSOAP");
	case SOAP_TYPE_ns1__getNonsenseSOAPResponse:
		return soap_in_ns1__getNonsenseSOAPResponse(soap, NULL, NULL, "ns1:getNonsenseSOAPResponse");
	case SOAP_TYPE_ns1__requestConnectionSOAP:
		return soap_in_ns1__requestConnectionSOAP(soap, NULL, NULL, "ns1:requestConnectionSOAP");
	case SOAP_TYPE_ns1__requestConnectionSOAPResponse:
		return soap_in_ns1__requestConnectionSOAPResponse(soap, NULL, NULL, "ns1:requestConnectionSOAPResponse");
	case SOAP_TYPE_ns1__transferDataSOAP:
		return soap_in_ns1__transferDataSOAP(soap, NULL, NULL, "ns1:transferDataSOAP");
	case SOAP_TYPE_ns1__transferDataSOAPResponse:
		return soap_in_ns1__transferDataSOAPResponse(soap, NULL, NULL, "ns1:transferDataSOAPResponse");
	case SOAP_TYPE_PointerTons1__NoSuchAlgorithmException:
		return soap_in_PointerTons1__NoSuchAlgorithmException(soap, NULL, NULL, "ns1:NoSuchAlgorithmException");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:NoSuchAlgorithmException"))
		{	*type = SOAP_TYPE_ns1__NoSuchAlgorithmException;
			return soap_in_ns1__NoSuchAlgorithmException(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:recieveOKSOAP"))
		{	*type = SOAP_TYPE_ns1__recieveOKSOAP;
			return soap_in_ns1__recieveOKSOAP(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:recieveOKSOAPResponse"))
		{	*type = SOAP_TYPE_ns1__recieveOKSOAPResponse;
			return soap_in_ns1__recieveOKSOAPResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:sendLogHashCipherSOAP"))
		{	*type = SOAP_TYPE_ns1__sendLogHashCipherSOAP;
			return soap_in_ns1__sendLogHashCipherSOAP(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:sendLogHashCipherSOAPResponse"))
		{	*type = SOAP_TYPE_ns1__sendLogHashCipherSOAPResponse;
			return soap_in_ns1__sendLogHashCipherSOAPResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:sendCipherInonsenseSOAP"))
		{	*type = SOAP_TYPE_ns1__sendCipherInonsenseSOAP;
			return soap_in_ns1__sendCipherInonsenseSOAP(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:sendCipherInonsenseSOAPResponse"))
		{	*type = SOAP_TYPE_ns1__sendCipherInonsenseSOAPResponse;
			return soap_in_ns1__sendCipherInonsenseSOAPResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getPublicKeySOAP"))
		{	*type = SOAP_TYPE_ns1__getPublicKeySOAP;
			return soap_in_ns1__getPublicKeySOAP(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getPublicKeySOAPResponse"))
		{	*type = SOAP_TYPE_ns1__getPublicKeySOAPResponse;
			return soap_in_ns1__getPublicKeySOAPResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getNonsenseSOAP"))
		{	*type = SOAP_TYPE_ns1__getNonsenseSOAP;
			return soap_in_ns1__getNonsenseSOAP(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getNonsenseSOAPResponse"))
		{	*type = SOAP_TYPE_ns1__getNonsenseSOAPResponse;
			return soap_in_ns1__getNonsenseSOAPResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:requestConnectionSOAP"))
		{	*type = SOAP_TYPE_ns1__requestConnectionSOAP;
			return soap_in_ns1__requestConnectionSOAP(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:requestConnectionSOAPResponse"))
		{	*type = SOAP_TYPE_ns1__requestConnectionSOAPResponse;
			return soap_in_ns1__requestConnectionSOAPResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:transferDataSOAP"))
		{	*type = SOAP_TYPE_ns1__transferDataSOAP;
			return soap_in_ns1__transferDataSOAP(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:transferDataSOAPResponse"))
		{	*type = SOAP_TYPE_ns1__transferDataSOAPResponse;
			return soap_in_ns1__transferDataSOAPResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				if (soap_ignore(soap) || soap_element_end_in(soap, NULL))
					return soap->error;
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_ns1__NoSuchAlgorithmException:
		return ((ns1__NoSuchAlgorithmException *)ptr)->soap_out(soap, tag, id, "ns1:NoSuchAlgorithmException");
	case SOAP_TYPE_ns1__recieveOKSOAP:
		return soap_out_ns1__recieveOKSOAP(soap, tag, id, (const struct ns1__recieveOKSOAP *)ptr, "ns1:recieveOKSOAP");
	case SOAP_TYPE_ns1__recieveOKSOAPResponse:
		return soap_out_ns1__recieveOKSOAPResponse(soap, tag, id, (const struct ns1__recieveOKSOAPResponse *)ptr, "ns1:recieveOKSOAPResponse");
	case SOAP_TYPE_ns1__sendLogHashCipherSOAP:
		return soap_out_ns1__sendLogHashCipherSOAP(soap, tag, id, (const struct ns1__sendLogHashCipherSOAP *)ptr, "ns1:sendLogHashCipherSOAP");
	case SOAP_TYPE_ns1__sendLogHashCipherSOAPResponse:
		return soap_out_ns1__sendLogHashCipherSOAPResponse(soap, tag, id, (const struct ns1__sendLogHashCipherSOAPResponse *)ptr, "ns1:sendLogHashCipherSOAPResponse");
	case SOAP_TYPE_ns1__sendCipherInonsenseSOAP:
		return soap_out_ns1__sendCipherInonsenseSOAP(soap, tag, id, (const struct ns1__sendCipherInonsenseSOAP *)ptr, "ns1:sendCipherInonsenseSOAP");
	case SOAP_TYPE_ns1__sendCipherInonsenseSOAPResponse:
		return soap_out_ns1__sendCipherInonsenseSOAPResponse(soap, tag, id, (const struct ns1__sendCipherInonsenseSOAPResponse *)ptr, "ns1:sendCipherInonsenseSOAPResponse");
	case SOAP_TYPE_ns1__getPublicKeySOAP:
		return soap_out_ns1__getPublicKeySOAP(soap, tag, id, (const struct ns1__getPublicKeySOAP *)ptr, "ns1:getPublicKeySOAP");
	case SOAP_TYPE_ns1__getPublicKeySOAPResponse:
		return soap_out_ns1__getPublicKeySOAPResponse(soap, tag, id, (const struct ns1__getPublicKeySOAPResponse *)ptr, "ns1:getPublicKeySOAPResponse");
	case SOAP_TYPE_ns1__getNonsenseSOAP:
		return soap_out_ns1__getNonsenseSOAP(soap, tag, id, (const struct ns1__getNonsenseSOAP *)ptr, "ns1:getNonsenseSOAP");
	case SOAP_TYPE_ns1__getNonsenseSOAPResponse:
		return soap_out_ns1__getNonsenseSOAPResponse(soap, tag, id, (const struct ns1__getNonsenseSOAPResponse *)ptr, "ns1:getNonsenseSOAPResponse");
	case SOAP_TYPE_ns1__requestConnectionSOAP:
		return soap_out_ns1__requestConnectionSOAP(soap, tag, id, (const struct ns1__requestConnectionSOAP *)ptr, "ns1:requestConnectionSOAP");
	case SOAP_TYPE_ns1__requestConnectionSOAPResponse:
		return soap_out_ns1__requestConnectionSOAPResponse(soap, tag, id, (const struct ns1__requestConnectionSOAPResponse *)ptr, "ns1:requestConnectionSOAPResponse");
	case SOAP_TYPE_ns1__transferDataSOAP:
		return soap_out_ns1__transferDataSOAP(soap, tag, id, (const struct ns1__transferDataSOAP *)ptr, "ns1:transferDataSOAP");
	case SOAP_TYPE_ns1__transferDataSOAPResponse:
		return soap_out_ns1__transferDataSOAPResponse(soap, tag, id, (const struct ns1__transferDataSOAPResponse *)ptr, "ns1:transferDataSOAPResponse");
	case SOAP_TYPE_PointerTons1__NoSuchAlgorithmException:
		return soap_out_PointerTons1__NoSuchAlgorithmException(soap, tag, id, (ns1__NoSuchAlgorithmException *const*)ptr, "ns1:NoSuchAlgorithmException");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns1__NoSuchAlgorithmException:
		((ns1__NoSuchAlgorithmException *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__recieveOKSOAP:
		soap_serialize_ns1__recieveOKSOAP(soap, (const struct ns1__recieveOKSOAP *)ptr);
		break;
	case SOAP_TYPE_ns1__recieveOKSOAPResponse:
		soap_serialize_ns1__recieveOKSOAPResponse(soap, (const struct ns1__recieveOKSOAPResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__sendLogHashCipherSOAP:
		soap_serialize_ns1__sendLogHashCipherSOAP(soap, (const struct ns1__sendLogHashCipherSOAP *)ptr);
		break;
	case SOAP_TYPE_ns1__sendLogHashCipherSOAPResponse:
		soap_serialize_ns1__sendLogHashCipherSOAPResponse(soap, (const struct ns1__sendLogHashCipherSOAPResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__sendCipherInonsenseSOAP:
		soap_serialize_ns1__sendCipherInonsenseSOAP(soap, (const struct ns1__sendCipherInonsenseSOAP *)ptr);
		break;
	case SOAP_TYPE_ns1__sendCipherInonsenseSOAPResponse:
		soap_serialize_ns1__sendCipherInonsenseSOAPResponse(soap, (const struct ns1__sendCipherInonsenseSOAPResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__getPublicKeySOAP:
		soap_serialize_ns1__getPublicKeySOAP(soap, (const struct ns1__getPublicKeySOAP *)ptr);
		break;
	case SOAP_TYPE_ns1__getPublicKeySOAPResponse:
		soap_serialize_ns1__getPublicKeySOAPResponse(soap, (const struct ns1__getPublicKeySOAPResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__getNonsenseSOAP:
		soap_serialize_ns1__getNonsenseSOAP(soap, (const struct ns1__getNonsenseSOAP *)ptr);
		break;
	case SOAP_TYPE_ns1__getNonsenseSOAPResponse:
		soap_serialize_ns1__getNonsenseSOAPResponse(soap, (const struct ns1__getNonsenseSOAPResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__requestConnectionSOAP:
		soap_serialize_ns1__requestConnectionSOAP(soap, (const struct ns1__requestConnectionSOAP *)ptr);
		break;
	case SOAP_TYPE_ns1__requestConnectionSOAPResponse:
		soap_serialize_ns1__requestConnectionSOAPResponse(soap, (const struct ns1__requestConnectionSOAPResponse *)ptr);
		break;
	case SOAP_TYPE_ns1__transferDataSOAP:
		soap_serialize_ns1__transferDataSOAP(soap, (const struct ns1__transferDataSOAP *)ptr);
		break;
	case SOAP_TYPE_ns1__transferDataSOAPResponse:
		soap_serialize_ns1__transferDataSOAPResponse(soap, (const struct ns1__transferDataSOAPResponse *)ptr);
		break;
	case SOAP_TYPE_PointerTons1__NoSuchAlgorithmException:
		soap_serialize_PointerTons1__NoSuchAlgorithmException(soap, (ns1__NoSuchAlgorithmException *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__NoSuchAlgorithmException:
		return (void*)soap_instantiate_ns1__NoSuchAlgorithmException(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_ns1__transferDataSOAPResponse:
		return (void*)soap_instantiate_ns1__transferDataSOAPResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__transferDataSOAP:
		return (void*)soap_instantiate_ns1__transferDataSOAP(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__requestConnectionSOAPResponse:
		return (void*)soap_instantiate_ns1__requestConnectionSOAPResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__requestConnectionSOAP:
		return (void*)soap_instantiate_ns1__requestConnectionSOAP(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getNonsenseSOAPResponse:
		return (void*)soap_instantiate_ns1__getNonsenseSOAPResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getNonsenseSOAP:
		return (void*)soap_instantiate_ns1__getNonsenseSOAP(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getPublicKeySOAPResponse:
		return (void*)soap_instantiate_ns1__getPublicKeySOAPResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getPublicKeySOAP:
		return (void*)soap_instantiate_ns1__getPublicKeySOAP(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__sendCipherInonsenseSOAPResponse:
		return (void*)soap_instantiate_ns1__sendCipherInonsenseSOAPResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__sendCipherInonsenseSOAP:
		return (void*)soap_instantiate_ns1__sendCipherInonsenseSOAP(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__sendLogHashCipherSOAPResponse:
		return (void*)soap_instantiate_ns1__sendLogHashCipherSOAPResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__sendLogHashCipherSOAP:
		return (void*)soap_instantiate_ns1__sendLogHashCipherSOAP(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__recieveOKSOAPResponse:
		return (void*)soap_instantiate_ns1__recieveOKSOAPResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__recieveOKSOAP:
		return (void*)soap_instantiate_ns1__recieveOKSOAP(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__NoSuchAlgorithmException:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__NoSuchAlgorithmException*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__NoSuchAlgorithmException*>(p->ptr));
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		break;
#endif
	case SOAP_TYPE_ns1__transferDataSOAPResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns1__transferDataSOAPResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns1__transferDataSOAPResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__transferDataSOAP:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns1__transferDataSOAP*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns1__transferDataSOAP*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__requestConnectionSOAPResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns1__requestConnectionSOAPResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns1__requestConnectionSOAPResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__requestConnectionSOAP:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns1__requestConnectionSOAP*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns1__requestConnectionSOAP*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__getNonsenseSOAPResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns1__getNonsenseSOAPResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns1__getNonsenseSOAPResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__getNonsenseSOAP:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns1__getNonsenseSOAP*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns1__getNonsenseSOAP*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__getPublicKeySOAPResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns1__getPublicKeySOAPResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns1__getPublicKeySOAPResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__getPublicKeySOAP:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns1__getPublicKeySOAP*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns1__getPublicKeySOAP*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__sendCipherInonsenseSOAPResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns1__sendCipherInonsenseSOAPResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns1__sendCipherInonsenseSOAPResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__sendCipherInonsenseSOAP:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns1__sendCipherInonsenseSOAP*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns1__sendCipherInonsenseSOAP*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__sendLogHashCipherSOAPResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns1__sendLogHashCipherSOAPResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns1__sendLogHashCipherSOAPResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__sendLogHashCipherSOAP:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns1__sendLogHashCipherSOAP*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns1__sendLogHashCipherSOAP*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__recieveOKSOAPResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns1__recieveOKSOAPResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns1__recieveOKSOAPResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__recieveOKSOAP:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns1__recieveOKSOAP*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns1__recieveOKSOAP*>(p->ptr));
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		break;
#endif
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{
	do
	{	switch (t)
		{
		default: return 0;
		}
	}
	while (t != b);
	return 1;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_ns1__NoSuchAlgorithmException:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__NoSuchAlgorithmException type=%d location=%p object=%p\n", t, p, q));
		*(ns1__NoSuchAlgorithmException*)p = *(ns1__NoSuchAlgorithmException*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
	case SOAP_TYPE_ns1__transferDataSOAPResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__transferDataSOAPResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__transferDataSOAPResponse*)p = *(struct ns1__transferDataSOAPResponse*)q;
		break;
	case SOAP_TYPE_ns1__transferDataSOAP:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__transferDataSOAP type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__transferDataSOAP*)p = *(struct ns1__transferDataSOAP*)q;
		break;
	case SOAP_TYPE_ns1__requestConnectionSOAPResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__requestConnectionSOAPResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__requestConnectionSOAPResponse*)p = *(struct ns1__requestConnectionSOAPResponse*)q;
		break;
	case SOAP_TYPE_ns1__requestConnectionSOAP:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__requestConnectionSOAP type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__requestConnectionSOAP*)p = *(struct ns1__requestConnectionSOAP*)q;
		break;
	case SOAP_TYPE_ns1__getNonsenseSOAPResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__getNonsenseSOAPResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__getNonsenseSOAPResponse*)p = *(struct ns1__getNonsenseSOAPResponse*)q;
		break;
	case SOAP_TYPE_ns1__getNonsenseSOAP:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__getNonsenseSOAP type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__getNonsenseSOAP*)p = *(struct ns1__getNonsenseSOAP*)q;
		break;
	case SOAP_TYPE_ns1__getPublicKeySOAPResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__getPublicKeySOAPResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__getPublicKeySOAPResponse*)p = *(struct ns1__getPublicKeySOAPResponse*)q;
		break;
	case SOAP_TYPE_ns1__getPublicKeySOAP:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__getPublicKeySOAP type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__getPublicKeySOAP*)p = *(struct ns1__getPublicKeySOAP*)q;
		break;
	case SOAP_TYPE_ns1__sendCipherInonsenseSOAPResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__sendCipherInonsenseSOAPResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__sendCipherInonsenseSOAPResponse*)p = *(struct ns1__sendCipherInonsenseSOAPResponse*)q;
		break;
	case SOAP_TYPE_ns1__sendCipherInonsenseSOAP:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__sendCipherInonsenseSOAP type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__sendCipherInonsenseSOAP*)p = *(struct ns1__sendCipherInonsenseSOAP*)q;
		break;
	case SOAP_TYPE_ns1__sendLogHashCipherSOAPResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__sendLogHashCipherSOAPResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__sendLogHashCipherSOAPResponse*)p = *(struct ns1__sendLogHashCipherSOAPResponse*)q;
		break;
	case SOAP_TYPE_ns1__sendLogHashCipherSOAP:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__sendLogHashCipherSOAP type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__sendLogHashCipherSOAP*)p = *(struct ns1__sendLogHashCipherSOAP*)q;
		break;
	case SOAP_TYPE_ns1__recieveOKSOAPResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__recieveOKSOAPResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__recieveOKSOAPResponse*)p = *(struct ns1__recieveOKSOAPResponse*)q;
		break;
	case SOAP_TYPE_ns1__recieveOKSOAP:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns1__recieveOKSOAP type=%d location=%p object=%p\n", t, p, q));
		*(struct ns1__recieveOKSOAP*)p = *(struct ns1__recieveOKSOAP*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type = %d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (LONG64)false, "false" },
	{ (LONG64)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
	return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n)
{
	bool *a = static_cast<bool *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(bool)));
	for (bool *p = a; p && n--; ++p)
		soap_default_bool(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	if (soap_out_bool(soap, tag ? tag : "boolean", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_std__string, SOAP_TYPE_std__string, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::string *p;
	size_t k = sizeof(std::string);
	if (n < 0)
	{	p = SOAP_NEW(std::string);
	}
	else
	{	p = SOAP_NEW_ARRAY(std::string, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::string location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_std__string, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_std__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__NoSuchAlgorithmException::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__NoSuchAlgorithmException::message = NULL;
	/* transient soap skipped */
}

void ns1__NoSuchAlgorithmException::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__NoSuchAlgorithmException::message);
#endif
}

int ns1__NoSuchAlgorithmException::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__NoSuchAlgorithmException(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NoSuchAlgorithmException(struct soap *soap, const char *tag, int id, const ns1__NoSuchAlgorithmException *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__NoSuchAlgorithmException), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "message", -1, &a->ns1__NoSuchAlgorithmException::message, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__NoSuchAlgorithmException::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__NoSuchAlgorithmException(soap, tag, this, type);
}

SOAP_FMAC3 ns1__NoSuchAlgorithmException * SOAP_FMAC4 soap_in_ns1__NoSuchAlgorithmException(struct soap *soap, const char *tag, ns1__NoSuchAlgorithmException *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__NoSuchAlgorithmException *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__NoSuchAlgorithmException, sizeof(ns1__NoSuchAlgorithmException), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__NoSuchAlgorithmException)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__NoSuchAlgorithmException *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_message1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "message", &a->ns1__NoSuchAlgorithmException::message, "xsd:string"))
				{	soap_flag_message1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__NoSuchAlgorithmException *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__NoSuchAlgorithmException, SOAP_TYPE_ns1__NoSuchAlgorithmException, sizeof(ns1__NoSuchAlgorithmException), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__NoSuchAlgorithmException * SOAP_FMAC2 soap_instantiate_ns1__NoSuchAlgorithmException(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__NoSuchAlgorithmException(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__NoSuchAlgorithmException *p;
	size_t k = sizeof(ns1__NoSuchAlgorithmException);
	if (n < 0)
	{	p = SOAP_NEW(ns1__NoSuchAlgorithmException);
		if (p)
			((ns1__NoSuchAlgorithmException*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__NoSuchAlgorithmException, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__NoSuchAlgorithmException*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__NoSuchAlgorithmException location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__NoSuchAlgorithmException, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__NoSuchAlgorithmException::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__NoSuchAlgorithmException(soap, tag ? tag : "ns1:NoSuchAlgorithmException", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__NoSuchAlgorithmException::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__NoSuchAlgorithmException(soap, this, tag, type);
}

SOAP_FMAC3 ns1__NoSuchAlgorithmException * SOAP_FMAC4 soap_get_ns1__NoSuchAlgorithmException(struct soap *soap, ns1__NoSuchAlgorithmException *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__NoSuchAlgorithmException(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__recieveOKSOAP(struct soap *soap, struct ns1__recieveOKSOAP *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__recieveOKSOAP(struct soap *soap, const struct ns1__recieveOKSOAP *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__recieveOKSOAP(struct soap *soap, const char *tag, int id, const struct ns1__recieveOKSOAP *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__recieveOKSOAP), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__recieveOKSOAP * SOAP_FMAC4 soap_in_ns1__recieveOKSOAP(struct soap *soap, const char *tag, struct ns1__recieveOKSOAP *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__recieveOKSOAP *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__recieveOKSOAP, sizeof(struct ns1__recieveOKSOAP), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__recieveOKSOAP(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__recieveOKSOAP *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__recieveOKSOAP, SOAP_TYPE_ns1__recieveOKSOAP, sizeof(struct ns1__recieveOKSOAP), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__recieveOKSOAP * SOAP_FMAC2 soap_instantiate_ns1__recieveOKSOAP(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__recieveOKSOAP(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__recieveOKSOAP *p;
	size_t k = sizeof(struct ns1__recieveOKSOAP);
	if (n < 0)
	{	p = SOAP_NEW(struct ns1__recieveOKSOAP);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns1__recieveOKSOAP, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__recieveOKSOAP location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__recieveOKSOAP, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__recieveOKSOAP(struct soap *soap, const struct ns1__recieveOKSOAP *a, const char *tag, const char *type)
{
	if (soap_out_ns1__recieveOKSOAP(soap, tag ? tag : "ns1:recieveOKSOAP", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__recieveOKSOAP * SOAP_FMAC4 soap_get_ns1__recieveOKSOAP(struct soap *soap, struct ns1__recieveOKSOAP *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__recieveOKSOAP(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__recieveOKSOAPResponse(struct soap *soap, struct ns1__recieveOKSOAPResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_bool(soap, &a->return_);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__recieveOKSOAPResponse(struct soap *soap, const struct ns1__recieveOKSOAPResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__recieveOKSOAPResponse(struct soap *soap, const char *tag, int id, const struct ns1__recieveOKSOAPResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__recieveOKSOAPResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "return", -1, &a->return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__recieveOKSOAPResponse * SOAP_FMAC4 soap_in_ns1__recieveOKSOAPResponse(struct soap *soap, const char *tag, struct ns1__recieveOKSOAPResponse *a, const char *type)
{
	size_t soap_flag_return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__recieveOKSOAPResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__recieveOKSOAPResponse, sizeof(struct ns1__recieveOKSOAPResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__recieveOKSOAPResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "return", &a->return_, "xsd:boolean"))
				{	soap_flag_return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_return_ > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__recieveOKSOAPResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__recieveOKSOAPResponse, SOAP_TYPE_ns1__recieveOKSOAPResponse, sizeof(struct ns1__recieveOKSOAPResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__recieveOKSOAPResponse * SOAP_FMAC2 soap_instantiate_ns1__recieveOKSOAPResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__recieveOKSOAPResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__recieveOKSOAPResponse *p;
	size_t k = sizeof(struct ns1__recieveOKSOAPResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct ns1__recieveOKSOAPResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns1__recieveOKSOAPResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__recieveOKSOAPResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__recieveOKSOAPResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__recieveOKSOAPResponse(struct soap *soap, const struct ns1__recieveOKSOAPResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__recieveOKSOAPResponse(soap, tag ? tag : "ns1:recieveOKSOAPResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__recieveOKSOAPResponse * SOAP_FMAC4 soap_get_ns1__recieveOKSOAPResponse(struct soap *soap, struct ns1__recieveOKSOAPResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__recieveOKSOAPResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__sendLogHashCipherSOAP(struct soap *soap, struct ns1__sendLogHashCipherSOAP *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->arg0);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__sendLogHashCipherSOAP(struct soap *soap, const struct ns1__sendLogHashCipherSOAP *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->arg0, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->arg0);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendLogHashCipherSOAP(struct soap *soap, const char *tag, int id, const struct ns1__sendLogHashCipherSOAP *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__sendLogHashCipherSOAP), type))
		return soap->error;
	if (soap_out_std__string(soap, "arg0", -1, &a->arg0, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__sendLogHashCipherSOAP * SOAP_FMAC4 soap_in_ns1__sendLogHashCipherSOAP(struct soap *soap, const char *tag, struct ns1__sendLogHashCipherSOAP *a, const char *type)
{
	size_t soap_flag_arg0 = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__sendLogHashCipherSOAP *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__sendLogHashCipherSOAP, sizeof(struct ns1__sendLogHashCipherSOAP), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__sendLogHashCipherSOAP(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg0 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "arg0", &a->arg0, "xsd:string"))
				{	soap_flag_arg0--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_arg0 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__sendLogHashCipherSOAP *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__sendLogHashCipherSOAP, SOAP_TYPE_ns1__sendLogHashCipherSOAP, sizeof(struct ns1__sendLogHashCipherSOAP), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__sendLogHashCipherSOAP * SOAP_FMAC2 soap_instantiate_ns1__sendLogHashCipherSOAP(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__sendLogHashCipherSOAP(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__sendLogHashCipherSOAP *p;
	size_t k = sizeof(struct ns1__sendLogHashCipherSOAP);
	if (n < 0)
	{	p = SOAP_NEW(struct ns1__sendLogHashCipherSOAP);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns1__sendLogHashCipherSOAP, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__sendLogHashCipherSOAP location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__sendLogHashCipherSOAP, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__sendLogHashCipherSOAP(struct soap *soap, const struct ns1__sendLogHashCipherSOAP *a, const char *tag, const char *type)
{
	if (soap_out_ns1__sendLogHashCipherSOAP(soap, tag ? tag : "ns1:sendLogHashCipherSOAP", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__sendLogHashCipherSOAP * SOAP_FMAC4 soap_get_ns1__sendLogHashCipherSOAP(struct soap *soap, struct ns1__sendLogHashCipherSOAP *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__sendLogHashCipherSOAP(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__sendLogHashCipherSOAPResponse(struct soap *soap, struct ns1__sendLogHashCipherSOAPResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__sendLogHashCipherSOAPResponse(struct soap *soap, const struct ns1__sendLogHashCipherSOAPResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendLogHashCipherSOAPResponse(struct soap *soap, const char *tag, int id, const struct ns1__sendLogHashCipherSOAPResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__sendLogHashCipherSOAPResponse), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__sendLogHashCipherSOAPResponse * SOAP_FMAC4 soap_in_ns1__sendLogHashCipherSOAPResponse(struct soap *soap, const char *tag, struct ns1__sendLogHashCipherSOAPResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__sendLogHashCipherSOAPResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__sendLogHashCipherSOAPResponse, sizeof(struct ns1__sendLogHashCipherSOAPResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__sendLogHashCipherSOAPResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__sendLogHashCipherSOAPResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__sendLogHashCipherSOAPResponse, SOAP_TYPE_ns1__sendLogHashCipherSOAPResponse, sizeof(struct ns1__sendLogHashCipherSOAPResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__sendLogHashCipherSOAPResponse * SOAP_FMAC2 soap_instantiate_ns1__sendLogHashCipherSOAPResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__sendLogHashCipherSOAPResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__sendLogHashCipherSOAPResponse *p;
	size_t k = sizeof(struct ns1__sendLogHashCipherSOAPResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct ns1__sendLogHashCipherSOAPResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns1__sendLogHashCipherSOAPResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__sendLogHashCipherSOAPResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__sendLogHashCipherSOAPResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__sendLogHashCipherSOAPResponse(struct soap *soap, const struct ns1__sendLogHashCipherSOAPResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__sendLogHashCipherSOAPResponse(soap, tag ? tag : "ns1:sendLogHashCipherSOAPResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__sendLogHashCipherSOAPResponse * SOAP_FMAC4 soap_get_ns1__sendLogHashCipherSOAPResponse(struct soap *soap, struct ns1__sendLogHashCipherSOAPResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__sendLogHashCipherSOAPResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__sendCipherInonsenseSOAP(struct soap *soap, struct ns1__sendCipherInonsenseSOAP *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->arg0);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__sendCipherInonsenseSOAP(struct soap *soap, const struct ns1__sendCipherInonsenseSOAP *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->arg0, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->arg0);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendCipherInonsenseSOAP(struct soap *soap, const char *tag, int id, const struct ns1__sendCipherInonsenseSOAP *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__sendCipherInonsenseSOAP), type))
		return soap->error;
	if (soap_out_std__string(soap, "arg0", -1, &a->arg0, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__sendCipherInonsenseSOAP * SOAP_FMAC4 soap_in_ns1__sendCipherInonsenseSOAP(struct soap *soap, const char *tag, struct ns1__sendCipherInonsenseSOAP *a, const char *type)
{
	size_t soap_flag_arg0 = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__sendCipherInonsenseSOAP *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__sendCipherInonsenseSOAP, sizeof(struct ns1__sendCipherInonsenseSOAP), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__sendCipherInonsenseSOAP(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg0 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "arg0", &a->arg0, "xsd:string"))
				{	soap_flag_arg0--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_arg0 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__sendCipherInonsenseSOAP *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__sendCipherInonsenseSOAP, SOAP_TYPE_ns1__sendCipherInonsenseSOAP, sizeof(struct ns1__sendCipherInonsenseSOAP), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__sendCipherInonsenseSOAP * SOAP_FMAC2 soap_instantiate_ns1__sendCipherInonsenseSOAP(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__sendCipherInonsenseSOAP(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__sendCipherInonsenseSOAP *p;
	size_t k = sizeof(struct ns1__sendCipherInonsenseSOAP);
	if (n < 0)
	{	p = SOAP_NEW(struct ns1__sendCipherInonsenseSOAP);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns1__sendCipherInonsenseSOAP, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__sendCipherInonsenseSOAP location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__sendCipherInonsenseSOAP, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__sendCipherInonsenseSOAP(struct soap *soap, const struct ns1__sendCipherInonsenseSOAP *a, const char *tag, const char *type)
{
	if (soap_out_ns1__sendCipherInonsenseSOAP(soap, tag ? tag : "ns1:sendCipherInonsenseSOAP", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__sendCipherInonsenseSOAP * SOAP_FMAC4 soap_get_ns1__sendCipherInonsenseSOAP(struct soap *soap, struct ns1__sendCipherInonsenseSOAP *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__sendCipherInonsenseSOAP(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__sendCipherInonsenseSOAPResponse(struct soap *soap, struct ns1__sendCipherInonsenseSOAPResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__sendCipherInonsenseSOAPResponse(struct soap *soap, const struct ns1__sendCipherInonsenseSOAPResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendCipherInonsenseSOAPResponse(struct soap *soap, const char *tag, int id, const struct ns1__sendCipherInonsenseSOAPResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__sendCipherInonsenseSOAPResponse), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__sendCipherInonsenseSOAPResponse * SOAP_FMAC4 soap_in_ns1__sendCipherInonsenseSOAPResponse(struct soap *soap, const char *tag, struct ns1__sendCipherInonsenseSOAPResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__sendCipherInonsenseSOAPResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__sendCipherInonsenseSOAPResponse, sizeof(struct ns1__sendCipherInonsenseSOAPResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__sendCipherInonsenseSOAPResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__sendCipherInonsenseSOAPResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__sendCipherInonsenseSOAPResponse, SOAP_TYPE_ns1__sendCipherInonsenseSOAPResponse, sizeof(struct ns1__sendCipherInonsenseSOAPResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__sendCipherInonsenseSOAPResponse * SOAP_FMAC2 soap_instantiate_ns1__sendCipherInonsenseSOAPResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__sendCipherInonsenseSOAPResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__sendCipherInonsenseSOAPResponse *p;
	size_t k = sizeof(struct ns1__sendCipherInonsenseSOAPResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct ns1__sendCipherInonsenseSOAPResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns1__sendCipherInonsenseSOAPResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__sendCipherInonsenseSOAPResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__sendCipherInonsenseSOAPResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__sendCipherInonsenseSOAPResponse(struct soap *soap, const struct ns1__sendCipherInonsenseSOAPResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__sendCipherInonsenseSOAPResponse(soap, tag ? tag : "ns1:sendCipherInonsenseSOAPResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__sendCipherInonsenseSOAPResponse * SOAP_FMAC4 soap_get_ns1__sendCipherInonsenseSOAPResponse(struct soap *soap, struct ns1__sendCipherInonsenseSOAPResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__sendCipherInonsenseSOAPResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getPublicKeySOAP(struct soap *soap, struct ns1__getPublicKeySOAP *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getPublicKeySOAP(struct soap *soap, const struct ns1__getPublicKeySOAP *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getPublicKeySOAP(struct soap *soap, const char *tag, int id, const struct ns1__getPublicKeySOAP *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getPublicKeySOAP), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__getPublicKeySOAP * SOAP_FMAC4 soap_in_ns1__getPublicKeySOAP(struct soap *soap, const char *tag, struct ns1__getPublicKeySOAP *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__getPublicKeySOAP *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getPublicKeySOAP, sizeof(struct ns1__getPublicKeySOAP), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__getPublicKeySOAP(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__getPublicKeySOAP *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getPublicKeySOAP, SOAP_TYPE_ns1__getPublicKeySOAP, sizeof(struct ns1__getPublicKeySOAP), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__getPublicKeySOAP * SOAP_FMAC2 soap_instantiate_ns1__getPublicKeySOAP(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getPublicKeySOAP(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__getPublicKeySOAP *p;
	size_t k = sizeof(struct ns1__getPublicKeySOAP);
	if (n < 0)
	{	p = SOAP_NEW(struct ns1__getPublicKeySOAP);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns1__getPublicKeySOAP, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__getPublicKeySOAP location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__getPublicKeySOAP, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getPublicKeySOAP(struct soap *soap, const struct ns1__getPublicKeySOAP *a, const char *tag, const char *type)
{
	if (soap_out_ns1__getPublicKeySOAP(soap, tag ? tag : "ns1:getPublicKeySOAP", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__getPublicKeySOAP * SOAP_FMAC4 soap_get_ns1__getPublicKeySOAP(struct soap *soap, struct ns1__getPublicKeySOAP *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getPublicKeySOAP(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getPublicKeySOAPResponse(struct soap *soap, struct ns1__getPublicKeySOAPResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->return_);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getPublicKeySOAPResponse(struct soap *soap, const struct ns1__getPublicKeySOAPResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->return_, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->return_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getPublicKeySOAPResponse(struct soap *soap, const char *tag, int id, const struct ns1__getPublicKeySOAPResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getPublicKeySOAPResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "return", -1, &a->return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__getPublicKeySOAPResponse * SOAP_FMAC4 soap_in_ns1__getPublicKeySOAPResponse(struct soap *soap, const char *tag, struct ns1__getPublicKeySOAPResponse *a, const char *type)
{
	size_t soap_flag_return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__getPublicKeySOAPResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getPublicKeySOAPResponse, sizeof(struct ns1__getPublicKeySOAPResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__getPublicKeySOAPResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_ && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "return", &a->return_, "xsd:string"))
				{	soap_flag_return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_return_ > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__getPublicKeySOAPResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getPublicKeySOAPResponse, SOAP_TYPE_ns1__getPublicKeySOAPResponse, sizeof(struct ns1__getPublicKeySOAPResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__getPublicKeySOAPResponse * SOAP_FMAC2 soap_instantiate_ns1__getPublicKeySOAPResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getPublicKeySOAPResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__getPublicKeySOAPResponse *p;
	size_t k = sizeof(struct ns1__getPublicKeySOAPResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct ns1__getPublicKeySOAPResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns1__getPublicKeySOAPResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__getPublicKeySOAPResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__getPublicKeySOAPResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getPublicKeySOAPResponse(struct soap *soap, const struct ns1__getPublicKeySOAPResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__getPublicKeySOAPResponse(soap, tag ? tag : "ns1:getPublicKeySOAPResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__getPublicKeySOAPResponse * SOAP_FMAC4 soap_get_ns1__getPublicKeySOAPResponse(struct soap *soap, struct ns1__getPublicKeySOAPResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getPublicKeySOAPResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getNonsenseSOAP(struct soap *soap, struct ns1__getNonsenseSOAP *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getNonsenseSOAP(struct soap *soap, const struct ns1__getNonsenseSOAP *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getNonsenseSOAP(struct soap *soap, const char *tag, int id, const struct ns1__getNonsenseSOAP *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getNonsenseSOAP), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__getNonsenseSOAP * SOAP_FMAC4 soap_in_ns1__getNonsenseSOAP(struct soap *soap, const char *tag, struct ns1__getNonsenseSOAP *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__getNonsenseSOAP *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getNonsenseSOAP, sizeof(struct ns1__getNonsenseSOAP), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__getNonsenseSOAP(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__getNonsenseSOAP *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getNonsenseSOAP, SOAP_TYPE_ns1__getNonsenseSOAP, sizeof(struct ns1__getNonsenseSOAP), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__getNonsenseSOAP * SOAP_FMAC2 soap_instantiate_ns1__getNonsenseSOAP(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getNonsenseSOAP(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__getNonsenseSOAP *p;
	size_t k = sizeof(struct ns1__getNonsenseSOAP);
	if (n < 0)
	{	p = SOAP_NEW(struct ns1__getNonsenseSOAP);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns1__getNonsenseSOAP, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__getNonsenseSOAP location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__getNonsenseSOAP, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getNonsenseSOAP(struct soap *soap, const struct ns1__getNonsenseSOAP *a, const char *tag, const char *type)
{
	if (soap_out_ns1__getNonsenseSOAP(soap, tag ? tag : "ns1:getNonsenseSOAP", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__getNonsenseSOAP * SOAP_FMAC4 soap_get_ns1__getNonsenseSOAP(struct soap *soap, struct ns1__getNonsenseSOAP *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getNonsenseSOAP(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getNonsenseSOAPResponse(struct soap *soap, struct ns1__getNonsenseSOAPResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->return_);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getNonsenseSOAPResponse(struct soap *soap, const struct ns1__getNonsenseSOAPResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->return_, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->return_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getNonsenseSOAPResponse(struct soap *soap, const char *tag, int id, const struct ns1__getNonsenseSOAPResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getNonsenseSOAPResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "return", -1, &a->return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__getNonsenseSOAPResponse * SOAP_FMAC4 soap_in_ns1__getNonsenseSOAPResponse(struct soap *soap, const char *tag, struct ns1__getNonsenseSOAPResponse *a, const char *type)
{
	size_t soap_flag_return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__getNonsenseSOAPResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getNonsenseSOAPResponse, sizeof(struct ns1__getNonsenseSOAPResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__getNonsenseSOAPResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_ && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "return", &a->return_, "xsd:string"))
				{	soap_flag_return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_return_ > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__getNonsenseSOAPResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getNonsenseSOAPResponse, SOAP_TYPE_ns1__getNonsenseSOAPResponse, sizeof(struct ns1__getNonsenseSOAPResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__getNonsenseSOAPResponse * SOAP_FMAC2 soap_instantiate_ns1__getNonsenseSOAPResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getNonsenseSOAPResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__getNonsenseSOAPResponse *p;
	size_t k = sizeof(struct ns1__getNonsenseSOAPResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct ns1__getNonsenseSOAPResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns1__getNonsenseSOAPResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__getNonsenseSOAPResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__getNonsenseSOAPResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getNonsenseSOAPResponse(struct soap *soap, const struct ns1__getNonsenseSOAPResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__getNonsenseSOAPResponse(soap, tag ? tag : "ns1:getNonsenseSOAPResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__getNonsenseSOAPResponse * SOAP_FMAC4 soap_get_ns1__getNonsenseSOAPResponse(struct soap *soap, struct ns1__getNonsenseSOAPResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getNonsenseSOAPResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__requestConnectionSOAP(struct soap *soap, struct ns1__requestConnectionSOAP *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__requestConnectionSOAP(struct soap *soap, const struct ns1__requestConnectionSOAP *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__requestConnectionSOAP(struct soap *soap, const char *tag, int id, const struct ns1__requestConnectionSOAP *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__requestConnectionSOAP), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__requestConnectionSOAP * SOAP_FMAC4 soap_in_ns1__requestConnectionSOAP(struct soap *soap, const char *tag, struct ns1__requestConnectionSOAP *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__requestConnectionSOAP *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__requestConnectionSOAP, sizeof(struct ns1__requestConnectionSOAP), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__requestConnectionSOAP(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns1__requestConnectionSOAP *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__requestConnectionSOAP, SOAP_TYPE_ns1__requestConnectionSOAP, sizeof(struct ns1__requestConnectionSOAP), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__requestConnectionSOAP * SOAP_FMAC2 soap_instantiate_ns1__requestConnectionSOAP(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__requestConnectionSOAP(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__requestConnectionSOAP *p;
	size_t k = sizeof(struct ns1__requestConnectionSOAP);
	if (n < 0)
	{	p = SOAP_NEW(struct ns1__requestConnectionSOAP);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns1__requestConnectionSOAP, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__requestConnectionSOAP location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__requestConnectionSOAP, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__requestConnectionSOAP(struct soap *soap, const struct ns1__requestConnectionSOAP *a, const char *tag, const char *type)
{
	if (soap_out_ns1__requestConnectionSOAP(soap, tag ? tag : "ns1:requestConnectionSOAP", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__requestConnectionSOAP * SOAP_FMAC4 soap_get_ns1__requestConnectionSOAP(struct soap *soap, struct ns1__requestConnectionSOAP *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__requestConnectionSOAP(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__requestConnectionSOAPResponse(struct soap *soap, struct ns1__requestConnectionSOAPResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_bool(soap, &a->return_);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__requestConnectionSOAPResponse(struct soap *soap, const struct ns1__requestConnectionSOAPResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__requestConnectionSOAPResponse(struct soap *soap, const char *tag, int id, const struct ns1__requestConnectionSOAPResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__requestConnectionSOAPResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "return", -1, &a->return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__requestConnectionSOAPResponse * SOAP_FMAC4 soap_in_ns1__requestConnectionSOAPResponse(struct soap *soap, const char *tag, struct ns1__requestConnectionSOAPResponse *a, const char *type)
{
	size_t soap_flag_return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__requestConnectionSOAPResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__requestConnectionSOAPResponse, sizeof(struct ns1__requestConnectionSOAPResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__requestConnectionSOAPResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "return", &a->return_, "xsd:boolean"))
				{	soap_flag_return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_return_ > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__requestConnectionSOAPResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__requestConnectionSOAPResponse, SOAP_TYPE_ns1__requestConnectionSOAPResponse, sizeof(struct ns1__requestConnectionSOAPResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__requestConnectionSOAPResponse * SOAP_FMAC2 soap_instantiate_ns1__requestConnectionSOAPResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__requestConnectionSOAPResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__requestConnectionSOAPResponse *p;
	size_t k = sizeof(struct ns1__requestConnectionSOAPResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct ns1__requestConnectionSOAPResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns1__requestConnectionSOAPResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__requestConnectionSOAPResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__requestConnectionSOAPResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__requestConnectionSOAPResponse(struct soap *soap, const struct ns1__requestConnectionSOAPResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__requestConnectionSOAPResponse(soap, tag ? tag : "ns1:requestConnectionSOAPResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__requestConnectionSOAPResponse * SOAP_FMAC4 soap_get_ns1__requestConnectionSOAPResponse(struct soap *soap, struct ns1__requestConnectionSOAPResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__requestConnectionSOAPResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__transferDataSOAP(struct soap *soap, struct ns1__transferDataSOAP *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_arg0);
	soap_default_std__string(soap, &a->_arg1);
	soap_default_std__string(soap, &a->_arg2);
	soap_default_int(soap, &a->_arg3);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__transferDataSOAP(struct soap *soap, const struct ns1__transferDataSOAP *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->_arg0, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->_arg0);
	soap_embedded(soap, &a->_arg1, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->_arg1);
	soap_embedded(soap, &a->_arg2, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &a->_arg2);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__transferDataSOAP(struct soap *soap, const char *tag, int id, const struct ns1__transferDataSOAP *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__transferDataSOAP), type))
		return soap->error;
	if (soap_out_std__string(soap, "arg0", -1, &a->_arg0, ""))
		return soap->error;
	if (soap_out_std__string(soap, "arg1", -1, &a->_arg1, ""))
		return soap->error;
	if (soap_out_std__string(soap, "arg2", -1, &a->_arg2, ""))
		return soap->error;
	if (soap_out_int(soap, "arg3", -1, &a->_arg3, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__transferDataSOAP * SOAP_FMAC4 soap_in_ns1__transferDataSOAP(struct soap *soap, const char *tag, struct ns1__transferDataSOAP *a, const char *type)
{
	size_t soap_flag__arg0 = 1;
	size_t soap_flag__arg1 = 1;
	size_t soap_flag__arg2 = 1;
	size_t soap_flag__arg3 = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__transferDataSOAP *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__transferDataSOAP, sizeof(struct ns1__transferDataSOAP), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default_ns1__transferDataSOAP(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__arg0 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_arg0, "xsd:string"))
				{	soap_flag__arg0--;
					continue;
				}
			if (soap_flag__arg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_arg1, "xsd:string"))
				{	soap_flag__arg1--;
					continue;
				}
			if (soap_flag__arg2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, NULL, &a->_arg2, "xsd:string"))
				{	soap_flag__arg2--;
					continue;
				}
			if (soap_flag__arg3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, NULL, &a->_arg3, "xsd:int"))
				{	soap_flag__arg3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__arg0 > 0 || soap_flag__arg1 > 0 || soap_flag__arg2 > 0 || soap_flag__arg3 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__transferDataSOAP *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__transferDataSOAP, SOAP_TYPE_ns1__transferDataSOAP, sizeof(struct ns1__transferDataSOAP), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__transferDataSOAP * SOAP_FMAC2 soap_instantiate_ns1__transferDataSOAP(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__transferDataSOAP(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__transferDataSOAP *p;
	size_t k = sizeof(struct ns1__transferDataSOAP);
	if (n < 0)
	{	p = SOAP_NEW(struct ns1__transferDataSOAP);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns1__transferDataSOAP, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__transferDataSOAP location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__transferDataSOAP, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__transferDataSOAP(struct soap *soap, const struct ns1__transferDataSOAP *a, const char *tag, const char *type)
{
	if (soap_out_ns1__transferDataSOAP(soap, tag ? tag : "ns1:transferDataSOAP", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__transferDataSOAP * SOAP_FMAC4 soap_get_ns1__transferDataSOAP(struct soap *soap, struct ns1__transferDataSOAP *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__transferDataSOAP(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__transferDataSOAPResponse(struct soap *soap, struct ns1__transferDataSOAPResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_bool(soap, &a->_return_);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__transferDataSOAPResponse(struct soap *soap, const struct ns1__transferDataSOAPResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__transferDataSOAPResponse(struct soap *soap, const char *tag, int id, const struct ns1__transferDataSOAPResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__transferDataSOAPResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "return", -1, &a->_return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns1__transferDataSOAPResponse * SOAP_FMAC4 soap_in_ns1__transferDataSOAPResponse(struct soap *soap, const char *tag, struct ns1__transferDataSOAPResponse *a, const char *type)
{
	size_t soap_flag__return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns1__transferDataSOAPResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__transferDataSOAPResponse, sizeof(struct ns1__transferDataSOAPResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns1__transferDataSOAPResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__return_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, NULL, &a->_return_, "xsd:boolean"))
				{	soap_flag__return_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__return_ > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns1__transferDataSOAPResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__transferDataSOAPResponse, SOAP_TYPE_ns1__transferDataSOAPResponse, sizeof(struct ns1__transferDataSOAPResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns1__transferDataSOAPResponse * SOAP_FMAC2 soap_instantiate_ns1__transferDataSOAPResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__transferDataSOAPResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns1__transferDataSOAPResponse *p;
	size_t k = sizeof(struct ns1__transferDataSOAPResponse);
	if (n < 0)
	{	p = SOAP_NEW(struct ns1__transferDataSOAPResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct ns1__transferDataSOAPResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns1__transferDataSOAPResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__transferDataSOAPResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__transferDataSOAPResponse(struct soap *soap, const struct ns1__transferDataSOAPResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns1__transferDataSOAPResponse(soap, tag ? tag : "ns1:transferDataSOAPResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns1__transferDataSOAPResponse * SOAP_FMAC4 soap_get_ns1__transferDataSOAPResponse(struct soap *soap, struct ns1__transferDataSOAPResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__transferDataSOAPResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__NoSuchAlgorithmException_ = NULL;
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__NoSuchAlgorithmException(soap, &a->ns1__NoSuchAlgorithmException_);
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_out_PointerTons1__NoSuchAlgorithmException(soap, "ns1:NoSuchAlgorithmException", -1, &a->ns1__NoSuchAlgorithmException_, ""))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag_ns1__NoSuchAlgorithmException_ = 1;
	size_t soap_flag_fault = 1;
	size_t soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__NoSuchAlgorithmException_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__NoSuchAlgorithmException(soap, "ns1:NoSuchAlgorithmException", &a->ns1__NoSuchAlgorithmException_, "ns1:NoSuchAlgorithmException"))
				{	soap_flag_ns1__NoSuchAlgorithmException_--;
					continue;
				}
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__NoSuchAlgorithmException(struct soap *soap, ns1__NoSuchAlgorithmException *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__NoSuchAlgorithmException))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__NoSuchAlgorithmException(struct soap *soap, const char *tag, int id, ns1__NoSuchAlgorithmException *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__NoSuchAlgorithmException, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__NoSuchAlgorithmException ? type : NULL);
}

SOAP_FMAC3 ns1__NoSuchAlgorithmException ** SOAP_FMAC4 soap_in_PointerTons1__NoSuchAlgorithmException(struct soap *soap, const char *tag, ns1__NoSuchAlgorithmException **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__NoSuchAlgorithmException **)soap_malloc(soap, sizeof(ns1__NoSuchAlgorithmException *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__NoSuchAlgorithmException *)soap_instantiate_ns1__NoSuchAlgorithmException(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__NoSuchAlgorithmException **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__NoSuchAlgorithmException, sizeof(ns1__NoSuchAlgorithmException), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__NoSuchAlgorithmException(struct soap *soap, ns1__NoSuchAlgorithmException *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__NoSuchAlgorithmException(soap, tag ? tag : "ns1:NoSuchAlgorithmException", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__NoSuchAlgorithmException ** SOAP_FMAC4 soap_get_PointerTons1__NoSuchAlgorithmException(struct soap *soap, ns1__NoSuchAlgorithmException **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__NoSuchAlgorithmException(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTostd__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new__QName(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default__QName(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
