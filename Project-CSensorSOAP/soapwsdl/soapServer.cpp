/* soapServer.cpp
   Generated by gSOAP 2.8.41 for csensorwsdl.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapServer.cpp ver 2.8.41 2017-05-05 15:57:28 GMT")
extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
#ifndef WITH_FASTCGI
	soap->keep_alive = soap->max_keep_alive + 1;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (soap->keep_alive > 0 && soap->max_keep_alive > 0)
			soap->keep_alive--;
#endif
		if (soap_begin_serve(soap))
		{	if (soap->error >= SOAP_STOP)
				continue;
			return soap->error;
		}
		if ((soap_serve_request(soap) || (soap->fserveloop && soap->fserveloop(soap))) && soap->error && soap->error < SOAP_STOP)
		{
#ifdef WITH_FASTCGI
			soap_send_fault(soap);
#else
			return soap_send_fault(soap);
#endif
		}
#ifdef WITH_FASTCGI
		soap_destroy(soap);
		soap_end(soap);
	} while (1);
#else
	} while (soap->keep_alive);
#endif
	return SOAP_OK;
}

#ifndef WITH_NOSERVEREQUEST
extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:transferDataSOAP"))
		return soap_serve_ns1__transferDataSOAP(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:requestConnectionSOAP"))
		return soap_serve_ns1__requestConnectionSOAP(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:getNonsenseSOAP"))
		return soap_serve_ns1__getNonsenseSOAP(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:getPublicKeySOAP"))
		return soap_serve_ns1__getPublicKeySOAP(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:sendCipherInonsenseSOAP"))
		return soap_serve_ns1__sendCipherInonsenseSOAP(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:sendLogHashCipherSOAP"))
		return soap_serve_ns1__sendLogHashCipherSOAP(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:recieveOKSOAP"))
		return soap_serve_ns1__recieveOKSOAP(soap);
	return soap->error = SOAP_NO_METHOD;
}
#endif

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__transferDataSOAP(struct soap *soap)
{	struct ns1__transferDataSOAP soap_tmp_ns1__transferDataSOAP;
	struct ns1__transferDataSOAPResponse _param_1;
	soap_default_ns1__transferDataSOAPResponse(soap, &_param_1);
	soap_default_ns1__transferDataSOAP(soap, &soap_tmp_ns1__transferDataSOAP);
	if (!soap_get_ns1__transferDataSOAP(soap, &soap_tmp_ns1__transferDataSOAP, "ns1:transferDataSOAP", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns1__transferDataSOAP(soap, soap_tmp_ns1__transferDataSOAP._arg0, soap_tmp_ns1__transferDataSOAP._arg1, soap_tmp_ns1__transferDataSOAP._arg2, soap_tmp_ns1__transferDataSOAP._arg3, _param_1);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize_ns1__transferDataSOAPResponse(soap, &_param_1);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__transferDataSOAPResponse(soap, &_param_1, "ns1:transferDataSOAPResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__transferDataSOAPResponse(soap, &_param_1, "ns1:transferDataSOAPResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__requestConnectionSOAP(struct soap *soap)
{	struct ns1__requestConnectionSOAP soap_tmp_ns1__requestConnectionSOAP;
	struct ns1__requestConnectionSOAPResponse _param_1;
	soap_default_ns1__requestConnectionSOAPResponse(soap, &_param_1);
	soap_default_ns1__requestConnectionSOAP(soap, &soap_tmp_ns1__requestConnectionSOAP);
	if (!soap_get_ns1__requestConnectionSOAP(soap, &soap_tmp_ns1__requestConnectionSOAP, "ns1:requestConnectionSOAP", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns1__requestConnectionSOAP(soap, _param_1);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize_ns1__requestConnectionSOAPResponse(soap, &_param_1);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__requestConnectionSOAPResponse(soap, &_param_1, "ns1:requestConnectionSOAPResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__requestConnectionSOAPResponse(soap, &_param_1, "ns1:requestConnectionSOAPResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__getNonsenseSOAP(struct soap *soap)
{	struct ns1__getNonsenseSOAP soap_tmp_ns1__getNonsenseSOAP;
	struct ns1__getNonsenseSOAPResponse _param_1;
	soap_default_ns1__getNonsenseSOAPResponse(soap, &_param_1);
	soap_default_ns1__getNonsenseSOAP(soap, &soap_tmp_ns1__getNonsenseSOAP);
	if (!soap_get_ns1__getNonsenseSOAP(soap, &soap_tmp_ns1__getNonsenseSOAP, "ns1:getNonsenseSOAP", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns1__getNonsenseSOAP(soap, _param_1);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize_ns1__getNonsenseSOAPResponse(soap, &_param_1);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getNonsenseSOAPResponse(soap, &_param_1, "ns1:getNonsenseSOAPResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getNonsenseSOAPResponse(soap, &_param_1, "ns1:getNonsenseSOAPResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__getPublicKeySOAP(struct soap *soap)
{	struct ns1__getPublicKeySOAP soap_tmp_ns1__getPublicKeySOAP;
	struct ns1__getPublicKeySOAPResponse _param_1;
	soap_default_ns1__getPublicKeySOAPResponse(soap, &_param_1);
	soap_default_ns1__getPublicKeySOAP(soap, &soap_tmp_ns1__getPublicKeySOAP);
	if (!soap_get_ns1__getPublicKeySOAP(soap, &soap_tmp_ns1__getPublicKeySOAP, "ns1:getPublicKeySOAP", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns1__getPublicKeySOAP(soap, _param_1);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize_ns1__getPublicKeySOAPResponse(soap, &_param_1);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getPublicKeySOAPResponse(soap, &_param_1, "ns1:getPublicKeySOAPResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getPublicKeySOAPResponse(soap, &_param_1, "ns1:getPublicKeySOAPResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__sendCipherInonsenseSOAP(struct soap *soap)
{	struct ns1__sendCipherInonsenseSOAP soap_tmp_ns1__sendCipherInonsenseSOAP;
	struct ns1__sendCipherInonsenseSOAPResponse _param_1;
	soap_default_ns1__sendCipherInonsenseSOAPResponse(soap, &_param_1);
	soap_default_ns1__sendCipherInonsenseSOAP(soap, &soap_tmp_ns1__sendCipherInonsenseSOAP);
	if (!soap_get_ns1__sendCipherInonsenseSOAP(soap, &soap_tmp_ns1__sendCipherInonsenseSOAP, "ns1:sendCipherInonsenseSOAP", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns1__sendCipherInonsenseSOAP(soap, soap_tmp_ns1__sendCipherInonsenseSOAP.arg0, _param_1);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize_ns1__sendCipherInonsenseSOAPResponse(soap, &_param_1);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__sendCipherInonsenseSOAPResponse(soap, &_param_1, "ns1:sendCipherInonsenseSOAPResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__sendCipherInonsenseSOAPResponse(soap, &_param_1, "ns1:sendCipherInonsenseSOAPResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__sendLogHashCipherSOAP(struct soap *soap)
{	struct ns1__sendLogHashCipherSOAP soap_tmp_ns1__sendLogHashCipherSOAP;
	struct ns1__sendLogHashCipherSOAPResponse _param_1;
	soap_default_ns1__sendLogHashCipherSOAPResponse(soap, &_param_1);
	soap_default_ns1__sendLogHashCipherSOAP(soap, &soap_tmp_ns1__sendLogHashCipherSOAP);
	if (!soap_get_ns1__sendLogHashCipherSOAP(soap, &soap_tmp_ns1__sendLogHashCipherSOAP, "ns1:sendLogHashCipherSOAP", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns1__sendLogHashCipherSOAP(soap, soap_tmp_ns1__sendLogHashCipherSOAP.arg0, _param_1);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize_ns1__sendLogHashCipherSOAPResponse(soap, &_param_1);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__sendLogHashCipherSOAPResponse(soap, &_param_1, "ns1:sendLogHashCipherSOAPResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__sendLogHashCipherSOAPResponse(soap, &_param_1, "ns1:sendLogHashCipherSOAPResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__recieveOKSOAP(struct soap *soap)
{	struct ns1__recieveOKSOAP soap_tmp_ns1__recieveOKSOAP;
	struct ns1__recieveOKSOAPResponse _param_1;
	soap_default_ns1__recieveOKSOAPResponse(soap, &_param_1);
	soap_default_ns1__recieveOKSOAP(soap, &soap_tmp_ns1__recieveOKSOAP);
	if (!soap_get_ns1__recieveOKSOAP(soap, &soap_tmp_ns1__recieveOKSOAP, "ns1:recieveOKSOAP", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns1__recieveOKSOAP(soap, _param_1);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize_ns1__recieveOKSOAPResponse(soap, &_param_1);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__recieveOKSOAPResponse(soap, &_param_1, "ns1:recieveOKSOAPResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__recieveOKSOAPResponse(soap, &_param_1, "ns1:recieveOKSOAPResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapServer.cpp */
