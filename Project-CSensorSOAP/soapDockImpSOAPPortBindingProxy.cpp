/* soapDockImpSOAPPortBindingProxy.cpp
   Generated by gSOAP 2.8.41 for sensor.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapDockImpSOAPPortBindingProxy.h"

DockImpSOAPPortBindingProxy::DockImpSOAPPortBindingProxy()
{	this->soap = soap_new();
	this->soap_own = true;
	DockImpSOAPPortBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

DockImpSOAPPortBindingProxy::DockImpSOAPPortBindingProxy(const DockImpSOAPPortBindingProxy& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
}

DockImpSOAPPortBindingProxy::DockImpSOAPPortBindingProxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	DockImpSOAPPortBindingProxy_init(_soap->imode, _soap->omode);
}

DockImpSOAPPortBindingProxy::DockImpSOAPPortBindingProxy(const char *endpoint)
{	this->soap = soap_new();
	this->soap_own = true;
	DockImpSOAPPortBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = endpoint;
}

DockImpSOAPPortBindingProxy::DockImpSOAPPortBindingProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	DockImpSOAPPortBindingProxy_init(iomode, iomode);
}

DockImpSOAPPortBindingProxy::DockImpSOAPPortBindingProxy(const char *endpoint, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	DockImpSOAPPortBindingProxy_init(iomode, iomode);
	soap_endpoint = endpoint;
}

DockImpSOAPPortBindingProxy::DockImpSOAPPortBindingProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	DockImpSOAPPortBindingProxy_init(imode, omode);
}

DockImpSOAPPortBindingProxy::~DockImpSOAPPortBindingProxy()
{	if (this->soap_own)
		soap_free(this->soap);
}

void DockImpSOAPPortBindingProxy::DockImpSOAPPortBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
        {"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"ns1", "http://dockingsystem/", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

#ifndef WITH_PURE_VIRTUAL
DockImpSOAPPortBindingProxy *DockImpSOAPPortBindingProxy::copy()
{	DockImpSOAPPortBindingProxy *dup = SOAP_NEW_COPY(DockImpSOAPPortBindingProxy);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

DockImpSOAPPortBindingProxy& DockImpSOAPPortBindingProxy::operator=(const DockImpSOAPPortBindingProxy& rhs)
{	if (this->soap_own)
		soap_free(this->soap);
	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void DockImpSOAPPortBindingProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void DockImpSOAPPortBindingProxy::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	DockImpSOAPPortBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void DockImpSOAPPortBindingProxy::soap_noheader()
{	this->soap->header = NULL;
}

::SOAP_ENV__Header *DockImpSOAPPortBindingProxy::soap_header()
{	return this->soap->header;
}

::SOAP_ENV__Fault *DockImpSOAPPortBindingProxy::soap_fault()
{	return this->soap->fault;
}

const char *DockImpSOAPPortBindingProxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *DockImpSOAPPortBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int DockImpSOAPPortBindingProxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int DockImpSOAPPortBindingProxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void DockImpSOAPPortBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void DockImpSOAPPortBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *DockImpSOAPPortBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int DockImpSOAPPortBindingProxy::transferDataSOAP(const char *endpoint, const char *soap_action, std::string _arg0, std::string _arg1, std::string _arg2, struct ns1__transferDataSOAPResponse &_param_1)
{	struct soap *soap = this->soap;
	struct ns1__transferDataSOAP soap_tmp_ns1__transferDataSOAP;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:7777/ws/sensor";
	if (soap_action == NULL)
		soap_action = "http://dockingsystem/DockIntSOAP/transferDataSOAPRequest";
	soap_tmp_ns1__transferDataSOAP._arg0 = _arg0;
	soap_tmp_ns1__transferDataSOAP._arg1 = _arg1;
	soap_tmp_ns1__transferDataSOAP._arg2 = _arg2;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize_ns1__transferDataSOAP(soap, &soap_tmp_ns1__transferDataSOAP);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__transferDataSOAP(soap, &soap_tmp_ns1__transferDataSOAP, "ns1:transferDataSOAP", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__transferDataSOAP(soap, &soap_tmp_ns1__transferDataSOAP, "ns1:transferDataSOAP", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<struct ns1__transferDataSOAPResponse*>(&_param_1)) // NULL ref?
		return soap_closesock(soap);
	soap_default_ns1__transferDataSOAPResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__transferDataSOAPResponse(soap, &_param_1, "ns1:transferDataSOAPResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int DockImpSOAPPortBindingProxy::handshakeSOAP(const char *endpoint, const char *soap_action, struct ns1__handshakeSOAPResponse &_param_1)
{	struct soap *soap = this->soap;
	struct ns1__handshakeSOAP soap_tmp_ns1__handshakeSOAP;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:7777/ws/sensor";
	if (soap_action == NULL)
		soap_action = "http://dockingsystem/DockIntSOAP/handshakeSOAPRequest";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize_ns1__handshakeSOAP(soap, &soap_tmp_ns1__handshakeSOAP);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__handshakeSOAP(soap, &soap_tmp_ns1__handshakeSOAP, "ns1:handshakeSOAP", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__handshakeSOAP(soap, &soap_tmp_ns1__handshakeSOAP, "ns1:handshakeSOAP", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<struct ns1__handshakeSOAPResponse*>(&_param_1)) // NULL ref?
		return soap_closesock(soap);
	soap_default_ns1__handshakeSOAPResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__handshakeSOAPResponse(soap, &_param_1, "ns1:handshakeSOAPResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
