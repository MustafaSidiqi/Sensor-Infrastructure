/* soapStub.h
   Generated by gSOAP 2.8.41 for sensor.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <deque>
#include <list>
#include <vector>
#include <set>
#define SOAP_NAMESPACE_OF_ns1	"http://dockingsystem/"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20841
# error "GSOAP VERSION 20841 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

struct ns1__transferDataSOAPResponse;	/* sensor.h:248 */
struct ns1__transferDataSOAP;	/* sensor.h:315 */
struct ns1__handshakeSOAPResponse;	/* sensor.h:326 */
struct ns1__handshakeSOAP;	/* sensor.h:384 */

/* sensor.h:248 */
#ifndef SOAP_TYPE_ns1__transferDataSOAPResponse
#define SOAP_TYPE_ns1__transferDataSOAPResponse (11)
/* complex XSD type 'ns1:transferDataSOAPResponse': */
struct SOAP_CMAC ns1__transferDataSOAPResponse {
      public:
        /** Required element 'return' of XSD type 'xsd:boolean' */
        bool _return_;
      public:
        /** Return unique type id SOAP_TYPE_ns1__transferDataSOAPResponse */
        int soap_type() const { return SOAP_TYPE_ns1__transferDataSOAPResponse; }
        /** Constructor with member initializations */
        ns1__transferDataSOAPResponse()
        {
          _return_ = (bool)0;
        }
        /** Friend allocator used by soap_new_ns1__transferDataSOAPResponse(struct soap*, int) */
        friend SOAP_FMAC1 ns1__transferDataSOAPResponse * SOAP_FMAC2 soap_instantiate_ns1__transferDataSOAPResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* sensor.h:315 */
#ifndef SOAP_TYPE_ns1__transferDataSOAP
#define SOAP_TYPE_ns1__transferDataSOAP (16)
/* complex XSD type 'ns1:transferDataSOAP': */
struct SOAP_CMAC ns1__transferDataSOAP {
      public:
        /** Required element 'arg0' of XSD type 'xsd:string' */
        std::string _arg0;
        /** Required element 'arg1' of XSD type 'xsd:string' */
        std::string _arg1;
        /** Required element 'arg2' of XSD type 'xsd:string' */
        std::string _arg2;
      public:
        /** Return unique type id SOAP_TYPE_ns1__transferDataSOAP */
        int soap_type() const { return SOAP_TYPE_ns1__transferDataSOAP; }
        /** Constructor with member initializations */
        ns1__transferDataSOAP()
        {
        }
        /** Friend allocator used by soap_new_ns1__transferDataSOAP(struct soap*, int) */
        friend SOAP_FMAC1 ns1__transferDataSOAP * SOAP_FMAC2 soap_instantiate_ns1__transferDataSOAP(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* sensor.h:326 */
#ifndef SOAP_TYPE_ns1__handshakeSOAPResponse
#define SOAP_TYPE_ns1__handshakeSOAPResponse (17)
/* complex XSD type 'ns1:handshakeSOAPResponse': */
struct SOAP_CMAC ns1__handshakeSOAPResponse {
      public:
        /** Required element 'return' of XSD type 'xsd:boolean' */
        bool return_;
      public:
        /** Return unique type id SOAP_TYPE_ns1__handshakeSOAPResponse */
        int soap_type() const { return SOAP_TYPE_ns1__handshakeSOAPResponse; }
        /** Constructor with member initializations */
        ns1__handshakeSOAPResponse()
        {
          return_ = (bool)0;
        }
        /** Friend allocator used by soap_new_ns1__handshakeSOAPResponse(struct soap*, int) */
        friend SOAP_FMAC1 ns1__handshakeSOAPResponse * SOAP_FMAC2 soap_instantiate_ns1__handshakeSOAPResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* sensor.h:384 */
#ifndef SOAP_TYPE_ns1__handshakeSOAP
#define SOAP_TYPE_ns1__handshakeSOAP (20)
/* complex XSD type 'ns1:handshakeSOAP': */
struct SOAP_CMAC ns1__handshakeSOAP {
      public:
        /** Return unique type id SOAP_TYPE_ns1__handshakeSOAP */
        int soap_type() const { return SOAP_TYPE_ns1__handshakeSOAP; }
        /** Constructor with member initializations */
        ns1__handshakeSOAP()
        {
        }
        /** Friend allocator used by soap_new_ns1__handshakeSOAP(struct soap*, int) */
        friend SOAP_FMAC1 ns1__handshakeSOAP * SOAP_FMAC2 soap_instantiate_ns1__handshakeSOAP(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* sensor.h:445 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (21)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header()
        {
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Header(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* sensor.h:445 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (22)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XSD type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code()
        {
          SOAP_ENV__Value = (char *)0;
          SOAP_ENV__Subcode = (struct SOAP_ENV__Code *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Code(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* sensor.h:445 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (24)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail()
        {
          __any = (char *)0;
          __type = 0;
          fault = NULL;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Detail(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* sensor.h:445 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (27)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XSD type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason()
        {
          SOAP_ENV__Text = (char *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Reason(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* sensor.h:445 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (28)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XSD type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XSD type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XSD type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XSD type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XSD type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XSD type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault()
        {
          faultcode = (char *)0;
          faultstring = (char *)0;
          faultactor = (char *)0;
          detail = (struct SOAP_ENV__Detail *)0;
          SOAP_ENV__Code = (struct SOAP_ENV__Code *)0;
          SOAP_ENV__Reason = (struct SOAP_ENV__Reason *)0;
          SOAP_ENV__Node = (char *)0;
          SOAP_ENV__Role = (char *)0;
          SOAP_ENV__Detail = (struct SOAP_ENV__Detail *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Fault(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* sensor.h:102 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

/* sensor.h:102 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* bool has binding name 'bool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (12)
#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (13)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (28)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (27)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (24)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (22)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (21)
#endif

/* struct ns1__handshakeSOAP has binding name 'ns1__handshakeSOAP' for type 'ns1:handshakeSOAP' */
#ifndef SOAP_TYPE_ns1__handshakeSOAP
#define SOAP_TYPE_ns1__handshakeSOAP (20)
#endif

/* struct ns1__handshakeSOAPResponse has binding name 'ns1__handshakeSOAPResponse' for type 'ns1:handshakeSOAPResponse' */
#ifndef SOAP_TYPE_ns1__handshakeSOAPResponse
#define SOAP_TYPE_ns1__handshakeSOAPResponse (17)
#endif

/* struct ns1__transferDataSOAP has binding name 'ns1__transferDataSOAP' for type 'ns1:transferDataSOAP' */
#ifndef SOAP_TYPE_ns1__transferDataSOAP
#define SOAP_TYPE_ns1__transferDataSOAP (16)
#endif

/* struct ns1__transferDataSOAPResponse has binding name 'ns1__transferDataSOAPResponse' for type 'ns1:transferDataSOAPResponse' */
#ifndef SOAP_TYPE_ns1__transferDataSOAPResponse
#define SOAP_TYPE_ns1__transferDataSOAPResponse (11)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (30)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (29)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (23)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
